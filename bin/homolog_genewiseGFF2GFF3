#!/usr/bin/perl
use strict;
use Getopt::Long;

my $usage = <<USAGE;
Usage:
    perl $0 [options] genewise.gff > genewise.gff3 2> gene_id.with_stop_codon.list

    示例中，过滤掉得分低于15的genwise预测结果，同时将genwise结果转换成GFF3格式，同时修改Gene ID。此外，若基因模型最后一个CDS后紧跟的密码子若是终止密码子，则对最后的CDS位置进行修改，使其包含终止密码子，从而使3'端完整。
    程序输出过滤后的基因模型，且修正含有含有终止密码值的CDS信息。同时输出能修正终止密码子CDS的基因ID。

    --genome <string>    default: None
    输入基因组序列文件，用于检测基因模型的终止密码子是否紧邻最后的CDS。

    --min_score <int>    default: 15
    设置最低得分阈值。

    --gene_prefix <string>    default: genewise
    设置基因ID的前缀。

    --filterMiddleStopCodon
    加入该参数，过滤中间有终止密码子的基因模型。

    --input_genewise_start_info <string>    default: None
    输入根据genewise比对结果得到的起始密码子位点信息。该文件至少包含两列信息：第一列是序列名；第二列是可能的起始密码子的起始位点。

    --output_start_and_stop_hints_of_augustus <string>    default: None
    输出起始密码子和终止密码子的hints信息。若输入该参数，则必须要输入上一个参数。


USAGE
if (@ARGV==0){die $usage}

my ($genome, $min_score, $gene_prefix, $filterMiddleStopCodon, $input_genewise_start_info, $output_start_and_stop_hints_of_augustus);
GetOptions(
    "genome:s" => \$genome,
    "min_score:i" => \$min_score,
    "gene_prefix:s" => \$gene_prefix,
    "filterMiddleStopCodon!" => \$filterMiddleStopCodon,
    "input_genewise_start_info:s" => \$input_genewise_start_info,
    "output_start_and_stop_hints_of_augustus:s" => \$output_start_and_stop_hints_of_augustus,
);

$min_score ||= 15;
$gene_prefix ||= "genewise";
die "The parameter --genome should be set.\n" unless $genome;

if ($output_start_and_stop_hints_of_augustus) {
    die "You had given a value to --output_start_and_stop_hints_of_augustus. So, the parameter --input_genewise_start_info should be set.\n" unless $input_genewise_start_info;
    open OUT, ">", $output_start_and_stop_hints_of_augustus or die "Can not create file $output_start_and_stop_hints_of_augustus, $!\n";
    close OUT;
}

my %tss;
if ($input_genewise_start_info) {
    open IN, $input_genewise_start_info or die "Can not open file $input_genewise_start_info, $!\n";
    while (<IN>) {
        chomp;
        @_ = split /\s+/;
        $tss{"$_[0]\t$_[1]"} = 1;
    }
    close IN;
}

my (%seq, $seq_id);
open IN, $genome or die "Can not open file $genome, $!\n";
while (<IN>) {
    chomp;
    if (m/>(\S+)/) { $seq_id = $1 }
    else { $seq{$seq_id} .= $_; }
}
close IN;


my (%info, %score, %sort1, %sort2, %sort3, %sort4);
open IN, $ARGV[0] or die $!;
while (<IN>) {
    if (m/\tmatch\t.*ID=([^;]+);Name=([^;]+)/) {
        my $id = $1;
        @_ = split /\t/;
        $score{$id} = $_[5];
        $sort1{$id} = $_[0];
        $sort2{$id} = $_[3];
        $sort3{$id} = $_[4];
        $sort4{$id} = $_[6];
        s/\tmatch\t/\tgene\t/;
        my $mRNA = $_;
        $mRNA =~ s/\tgene\t/\tmRNA\t/;
        $mRNA =~ s/ID=([^;]+);(.*)/ID=$1.mRNA;Parent=$1;$2/;
        s/(\d+)\t(\d+)\t(.*?)\t\-/$2\t$1\t$3\t\-/;
        $mRNA =~ s/(\d+)\t(\d+)\t(.*?)\t\-/$2\t$1\t$3\t\-/;
        $info{$id}{"gene"} = "$_$mRNA";
    }
    elsif (m/\tcds\t.*ID=([^;]+);Name=([^;]+)/) {
        my $id = $1;
        s/\tcds\t/\tCDS\t/;
        s/ID=([^;]+);.*/ID=$1.mRNA.CDS;Parent=$1.mRNA;/;
        s/(\d+)\t(\d+)\t(.*?)\t\-/$2\t$1\t$3\t\-/;
        $info{$id}{"cds"} .= $_;
        #s/CDS\t/exon\t/;
        #s/CDS;/exon;/;
        #s/\d\tID/\.\tID/;
        #$info{$id}{"cds"} .= $_;
    }
}
close IN;

my $total_number = keys %info;
$total_number = length $total_number;
my $number;
my %gff;
foreach my $gene_id (sort {$sort1{$a} cmp $sort1{$b} or $sort2{$a} <=> $sort2{$b} or $sort3{$a} <=> $sort3{$b} or $sort4{$a} cmp $sort4{$b}} keys %info) {
    if ($score{$gene_id} >= $min_score) {
        $number ++;
        my $out = "$info{$gene_id}{'gene'}$info{$gene_id}{'cds'}";
        my $id_out = $gene_prefix . 0 x ($total_number - length($number)) . $number;
        $out =~ s/$gene_id/$id_out/g;
        $gff{$id_out} = $out;
    }
}

foreach my $gene_id (sort keys %gff) {
    my $info = $gff{$gene_id};
    my @line = split /\n/, $info;
    @_ = split /\t/, $line[0];
    my ($seqID, $strand) = ($_[0], $_[6]);

    my @cds;
    foreach (@line) {
        @_ = split /\t/;
        push @cds, "$_[3]\t$_[4]\t$_[7]" if $_[2] eq 'CDS';
    }
    @cds = sort { $a <=> $b } @cds;

    if ($strand eq "+") {
        if ($output_start_and_stop_hints_of_augustus) {
            open OUT, ">>", $output_start_and_stop_hints_of_augustus;
            my ($tss1, $tss2) = split /\t/, $cds[0];
            if ( (exists $tss{"$seqID\t$tss1"}) && (($tss2 - $tss1) >= 2) ) {
                my $codon = substr($seq{$seqID}, $tss1 - 1, 3);
                if ($codon eq "ATG") {
                    my $tss3 = $tss1 + 2;
                    print OUT "$seqID\t\.\tstart\t$tss1\t$tss3\t\.\t$strand\t0\tgrp=$gene_id;pri=4;src=P\n";
                }
            }
            close OUT;
        }

        my ($start, $end, $frame) = split /\t/, $cds[-1];
        my $frame = ($end + 1 - $start - $frame) % 3;
        $frame = 1 if $frame == 2;
        $frame = 2 if $frame == 1;
        if ($frame == 0) {
            my $codon = substr($seq{$seqID}, $end, 3);
            if ($codon eq "TAA" or $codon eq "TGA" or $codon eq "TAG") {
                my $end3 = $end + 3;
                $info =~ s/^(\S+\t\S+\t\S+\t\d+)\t$end\t/$1\t$end3\t/mg;
                print STDERR "Gene end with stop codon:$gene_id\t$strand\n";
                if ($output_start_and_stop_hints_of_augustus) {
                    open OUT, ">>", $output_start_and_stop_hints_of_augustus;
                    print OUT "$seqID\t\.\tstop\t$end\t$end3\t\.\t$strand\t0\tgrp=$gene_id;pri=4;src=P\n";
                    close OUT;
                }
            }
        }
    }
    elsif ($strand eq "-") {
        if ($output_start_and_stop_hints_of_augustus) {
            open OUT, ">>", $output_start_and_stop_hints_of_augustus;
            my ($tss1, $tss2) = split /\t/, $cds[-1];
            if ( (exists $tss{"$seqID\t$tss2"}) && (($tss2 - $tss1) >= 2) ) {
                my $codon = substr($seq{$seqID}, $tss2 - 3, 3);
                $codon = reverse $codon;
                $codon =~ tr/ATCGatcgn/TAGCTAGCN/;
                if ($codon eq "ATG") {
                    my $tss3 = $tss2 - 2;
                    print OUT "$seqID\t\.\tstart\t$tss3\t$tss2\t\.\t$strand\t0\tgrp=$gene_id;pri=4;src=P\n";
                }
            }
            close OUT;
        }

        my ($start, $end, $frame) = split /\t/, $cds[0];
        my $frame = ($end + 1 - $start - $frame) % 3;
        $frame = 1 if $frame == 2;
        $frame = 2 if $frame == 1;
        if ($frame == 0 && $start >= 4) {
            my $codon = substr($seq{$seqID}, ($start - 4), 3);
            $codon = reverse $codon;
            $codon =~ tr/ATCGatcgn/TAGCTAGCN/;
            if ($codon eq "TAA" or $codon eq "TGA" or $codon eq "TAG") {
                my $start3 = $start - 3;
                $info =~ s/^(\S+\t\S+\t\S+)\t$start\t/$1\t$start3\t/mg;
                print STDERR "Gene end with stop codon:$gene_id\t$strand\n";
                if ($output_start_and_stop_hints_of_augustus) {
                    open OUT, ">>", $output_start_and_stop_hints_of_augustus;
                    print OUT "$seqID\t\.\tstop\t$start3\t$start\t.\t$strand\t0\tgrp=$gene_id;pri=4;src=P\n";
                    close OUT;
                }
            }
        }
    }

    # 去掉中间含有终止密码子的基因模型
    my ($cds_seq, $frame);
    foreach (@cds) {
        @_ = split /\t/, $_;
        $cds_seq .= substr($seq{$seqID}, $_[0] - 1, $_[1] - $_[0] + 1);
    }
    if ($strand eq "+") {
        @_ = split /\t/, $cds[0];
        $frame = $_[2];
    }
    elsif ($strand eq "-") {
        @_ = split /\t/, $cds[-1];
        $frame = $_[2];
        $cds_seq = reverse $cds_seq;
        $cds_seq =~ tr/ATCGatcgn/TAGCTAGCN/;
    }
    $cds_seq =~ s/\w{$frame}//;
    my $pep = &cds2pep($cds_seq);
    if ($pep =~ m/\*/) {
        print STDERR "Gene middle with stop codon: $gene_id\t$strand\n";
        next if $filterMiddleStopCodon;
    }

    @line = split /\n/, $info;
    foreach (@line) {
        if (m/\tCDS\t/) {
            @_ = split /\t/;
            if ($_[3] <= $_[4]) {
                print "$_\n";
                s/CDS/exon/g;
                print "$_\n";
            }
            else {
                $_ = "$_[0]\t$_[1]\t$_[2]\t$_[4]\t$_[3]\t$_[5]\t$_[6]\t$_[7]\t$_[8]";
                print "$_\n";
                s/CDS/exon/g;
                print "$_\n";
            }
        }
        else {
            print "$_\n";
        }
    }
    print "\n";
}

sub cds2pep {
    my %cds2pep = (
        "TTT" => "F",
        "TTC" => "F",
        "TTA" => "L",
        "TTG" => "L",
        "TCT" => "S",
        "TCC" => "S",
        "TCA" => "S",
        "TCG" => "S",
        "TAT" => "Y",
        "TAC" => "Y",
        "TAA" => "*",
        "TAG" => "*",
        "TGT" => "C",
        "TGC" => "C",
        "TGA" => "*",
        "TGG" => "W",
        "CTT" => "L",
        "CTC" => "L",
        "CTA" => "L",
        "CTG" => "L",
        "CCT" => "P",
        "CCC" => "P",
        "CCA" => "P",
        "CCG" => "P",
        "CAT" => "H",
        "CAC" => "H",
        "CAA" => "Q",
        "CAG" => "Q",
        "CGT" => "R",
        "CGC" => "R",
        "CGA" => "R",
        "CGG" => "R",
        "ATT" => "I",
        "ATC" => "I",
        "ATA" => "I",
        "ATG" => "M",
        "ACT" => "T",
        "ACC" => "T",
        "ACA" => "T",
        "ACG" => "T",
        "AAT" => "N",
        "AAC" => "N",
        "AAA" => "K",
        "AAG" => "K",
        "AGT" => "S",
        "AGC" => "S",
        "AGA" => "R",
        "AGG" => "R",
        "GTT" => "V",
        "GTC" => "V",
        "GTA" => "V",
        "GTG" => "V",
        "GCT" => "A",
        "GCC" => "A",
        "GCA" => "A",
        "GCG" => "A",
        "GAT" => "D",
        "GAC" => "D",
        "GAA" => "E",
        "GAG" => "E",
        "GGT" => "G",
        "GGC" => "G",
        "GGA" => "G",
        "GGG" => "G",
    );
    my $seq = shift @_;
    my $pep;
    while ((length $seq) >= 3) {
        $seq =~ s/(\w{3})//;
        if (exists $cds2pep{$1}) {
            $pep .= $cds2pep{$1};
        }
        else {
            $pep .= 'X';
        }
    }
    return $pep;
}
