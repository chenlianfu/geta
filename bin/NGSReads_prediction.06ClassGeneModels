#!/usr/bin/env perl

use strict;
use Getopt::Long;
use Cwd qw/abs_path getcwd cwd/;
use File::Basename;

my $usage = <<USAGE;
Usage:
    $0 [options] transfrag.genome.fill2.gff3 transfrag.genome.nonFilled.gff3 ... > out.gff3

    本程序将NGSReads预测的基因模型分成四类：
        （A）在一个转录本中仅找到一个完整的基因模型，且CDS占比超过80%，excellent gene models
        （B）完整的基因模型，CDS占比超过80%，good gene models
        （C）完整的基因模型，CDS占比超过40%，fair gene models
        （D）完整且CDS占比低于40%的基因模型，或不完整的基因模型，poor gene models

    本程序只能分析没有可变剪接信息的GFF3文件。

    --help    default: None
    display this help and exit.

USAGE
if (@ARGV==0){die $usage}

my ($help_flag);
GetOptions(
    "help" => \$help_flag,
);

if ( $help_flag ) { die $usage }

# 读取GFF3文件
my %gene_info;
foreach my $input (@ARGV) {
    my %info = &get_geneModels_from_GFF3($input);
    foreach ( keys %info ) {
        $gene_info{$_} = $info{$_};
    }
}

my ( $num1, $num2, $num3, $num4 ) = (0, 0, 0, 0);
foreach my $gene_ID ( sort keys %gene_info ) {
    my $gene_header = $gene_info{$gene_ID}{"header"};
    my $Form = "one_transcript_get_1_gene_model_num1";
    $Form = $1 if $gene_header =~ m/Form=([^;]+)/;
    my $Integrity="complete";
    $Integrity = $1 if $gene_header =~ m/Integrity=([^;]+)/;

    my @mRNA_ID = @{$gene_info{$gene_ID}{"mRNA_ID"}};
    my $mRNA_header = $gene_info{$gene_ID}{"mRNA_header"}{$mRNA_ID[0]};
    my $mRNA_info = $gene_info{$gene_ID}{"mRNA_info"}{$mRNA_ID[0]};

    my $Filling2Complete = "False";
    $Filling2Complete = "True" if $mRNA_header =~ m/Filling2Complete=True/;
    $Integrity = "uncomplete" if $mRNA_header =~ m/Filling2Uncomplete=True/;

    my $ratio = 0;
    $ratio = &cal_CDS_ratio($mRNA_info);

    my $type;
    if ( $Form eq "one_transcript_get_1_gene_model_num1" && $Integrity eq "complete" && $ratio >= 0.8 ) {
        $type = "Type=excellent_gene_models_predicted_by_NGSReads";
        $num1 ++;
    }
    elsif ( $ratio >= 0.8 && ($Integrity eq "complete" or $Filling2Complete eq "True") ) {
        $type = "Type=good_gene_models_predicted_by_NGSReads";
        $num2 ++;
    }
    elsif ( $ratio >= 0.4 && ($Integrity eq "complete" or $Filling2Complete eq "True") ) {
        $type = "Type=fair_gene_models_predicted_by_NGSReads";
        $num3 ++;
    }
    else {
        $type = "Type=poor_gene_models_predicted_by_NGSReads";
        $num4 ++;
    }

    $ratio = sprintf("%.2f", $ratio * 100);
    $gene_header = &add_attr($gene_header, "$type;CDSRatio=$ratio%", 2);
    print "$gene_header$mRNA_header$mRNA_info\n";
}
print STDERR "The num of excellent gene models: $num1\n";
print STDERR "The num of good gene models:      $num2\n";
print STDERR "The num of fair gene models:      $num3\n";
print STDERR "The num of poor gene models:      $num4\n";

sub cal_CDS_ratio {
    my @mRNA_info = split /\n/, $_[0];
    my ($CDS_Length, $exon_length) = (0, 0);
    foreach ( @mRNA_info ) {
        @_ = split /\t/, $_;
        if ( $_[2] eq "CDS" ) {
            $CDS_Length += (abs($_[4] - $_[3]) + 1);
        }
        elsif ( $_[2] eq "exon" ) {
            $exon_length += (abs($_[4] - $_[3]) + 1);
        }
    }

    my $out_ratio = 0;
    $out_ratio = $CDS_Length / $exon_length if $exon_length != 0;
    return $out_ratio;
}

sub get_geneModels_from_GFF3 {
    my %gene_info;
    my $input_file = $_[0];
    # 第一轮，找gene信息
    open IN, $input_file or die "Can not open file $input_file, $!";
    while (<IN>) {
        if ( m/\tgene\t.*ID=([^;\s]+)/ ) {
            $gene_info{$1}{"header"} = $_;
        }
    }
    close IN;
    # 第二轮，找Parent值是geneID的信息，包含但不限于 mRNA 信息
    my %mRNA_ID2gene_ID;
    open IN, $input_file or die "Can not open file $input_file, $!";
    while (<IN>) {
        if ( m/Parent=([^;\s]+)/ ) {
            my $parent = $1;
            if ( exists $gene_info{$parent} ) {
                if ( m/ID=([^;\s]+)/ ) {
                    push @{$gene_info{$parent}{"mRNA_ID"}}, $1;
                    $gene_info{$parent}{"mRNA_header"}{$1} = $_;
                    $mRNA_ID2gene_ID{$1} = $parent;
                }
            }
        }
    }
    close IN;
    # 第三轮，找Parent值不是geneID的信息
    open IN, $input_file or die "Can not open file $input_file, $!";
    while (<IN>) {
        if ( m/Parent=([^;\s]+)/ && exists $mRNA_ID2gene_ID{$1} ) {
            my $parent = $1;
            $gene_info{$mRNA_ID2gene_ID{$1}}{"mRNA_info"}{$parent} .= $_;
        }
    }
    close IN;

    return %gene_info;
}

sub add_attr {
    my $mRNA_header = $_[0];
    my $add_attr = $_[1];
    my $pos = $_[2];
    chomp($mRNA_header);
    $mRNA_header =~ s/(.*)\t(.*)/$1/;
    my $attr = $2;
    $attr =~ s/;$//;

    my (%attr, %attr_sort, $sort_num);
    foreach ( split /;/, $attr ) {
        if (m/(.*)\=(.*)/) {
            $sort_num ++;
            $attr{$1} = $2;
            $attr_sort{$1} = $sort_num unless exists $attr_sort{$1};
        }
    }
    my $add_num = 0;
    while ( $add_attr =~ s/(.*)\=(.*)// ) {
        $attr{$1} = $2;
        $add_num ++;
        $sort_num ++;
        my $sort_num_new = $add_num / 100;
        if ( $pos >= 1 ) {
            $sort_num_new = $pos + $sort_num_new - 1;
        }
        else {
            $sort_num_new = $sort_num;
        }
        $attr_sort{$1} = $sort_num_new unless exists $attr_sort{$1};
    }

    my @out;
    foreach ( sort { $attr_sort{$a} <=> $attr_sort{$b} } keys %attr ) {
        push @out, "$_=$attr{$_}";
    }
    my $out = join ";", @out;
    return "$mRNA_header\t$out\n";
}
