#!/usr/bin/env perl

use strict;
use Getopt::Long;
use Cwd qw/abs_path getcwd cwd/;

my $usage = <<USAGE;
Usage:
    $0 [options] blast.tab > filtered.tab

    程序先对diamond blastx的HSP比对结果进行处理。若一个Hit对应多个HSPs，则将多个HSPs合并和分割。在多个HSPs中找最优HSP，将和最优HSP方向一直和距离较近的HSPs合并为一组；在剩下的HSPs继续找最优HSP及其分组；于是将多个HSPs分割成不同的组，每个HSPs组对应一个拷贝的基因区域。每个HSPs组输出一行匹配结果，使用组内的HSPs的起始结束坐标作为Query/Subject起始结束，使用最优HSP的evalue作为输出evalue值，使用组内的HSPs的Score之和作为输出Score值。程序在倒数第二列中输出组内HSPs的坐标信息，多个HSPs之间使用逗号分割并按Evalue从小到大排序输出；程序在最后一列中输出Group Region，以表示多行不同的Hits来自同一组，代表基因组上一个基因区域。
    程序进一步对diamond blastx的结果去冗余。采用三种方法进行过滤：（0）若Hit A和其它多个Hits之间重叠，且覆盖每个其它Hits区域的 >= 90% 时（此处认为Hit A包含了其它Hits），且Hit A的Evalue、Score得分都优于其它Hits，则对Hit A和其它Hits按Evalue和Score进行排序，挑选较好的Hits；（1）当其它Hit的Score得分低于Hit A Score的一定比例（默认40%）时，对该Hit进去去除；（2）同一个物种最多保留指定数量（默认2个）的Hits；（3）最多保留指定数量（默认为10个）的较好Hits。

    --threshold_HSP_distance <int>    default: 5000
    设置HSP之间的距离阈值。去除和最优HSP之间距离超过--threshold_HSP_distance参数设置阈值（单位bp）的HSP。

    --threshold_Hit_cover_ratio <float>    default: 0.9
    设置Hit A包含另外一个Hit B时，要求两个Hits重叠区域对Hit B匹配区域的覆盖比例阈值。当Hit A的Evalue和Score值都优于Hit B，且Hit B >=90%以上的区域和Hit A重叠时，则认为该Hit A包含Hit B，进而考虑对Hit B其进行去除。计算覆盖比例时，根据Hit A和Hit B的HSPs信息进行overlap比例计算，分子为Overlap部分的碱基数量，分母为Hit B的HSPs的总碱基数量。

    --threshold_Hit_num <int>    default: 10
    设置数量阈值。若Hits之间有包含关系时，最多保留指定数量（默认为10个）的较好Hits。分析过程分多步：（1）对和基因组3Kb窗口范围有重叠的所有Hits按Evalue从小到大、Score值从大到校、匹配范围从大到小进行排序，然后按顺序对Hits进行后续分析；（2）根据排序对Evalue值最小的最优Hit进行分析，在所有Hits中检索Score值更低并被最优Hit包含（根据--threshold_Hit_cover_ratio参数分析结果）的Hits，对这些Hits按Evalue和Score进行排序，去除Score值过低的Hits，再最多保留较好的指定数量（--threshold_Hit_num参数设置值）的Hits，删除其余较差的Hits；（3）对剩下未保留也未删除的Hits，延用第二步的策略，进一步的进行保留和删除操作，进行多轮直至分析完毕所有的Hit数据；（4）对整条基因组序列往后滑动，每次往后滑动1Kb距离，分析3Kb窗口，鉴定需要删除的的Hits信息。

    --threshold_species_num <int>    default: 2
    设置物种数量阈值。若Hit A和包含了多个其它Hits，对这些Hits进行去冗余时，来自同一物种的Hits最多保留--threshold_species_num阈值指定的个数。该参数生效需要subject name中包含物种名称信息。程序识别subject name中的关键词species（大小写均可以识别）及其后的字符[a-zA-Z0-9]作为物种名称。例如XP_002436309_2_SpeciesSorghumBicolor，程序识别其物种名称为SpeciesSorghumBicolor。若subject name中不包含关键词species及其后紧跟的物种名称，程序则以整个subject name为物种名称，从而使本参数不生效。

    --threshold_score_ratio <float>    default: 0.4
    设置Score比例阈值。当两个BLAST Hits的匹配区域有包含关系时，Hit A包含Hit B，Hit A evalue优于Hit B evalue， 且B Hit Score / A Hit Score低于--threshold_score_ratio参数设置的阈值，则去除Hit B。

    --help    default: None
    display this help and exit.

USAGE
if (@ARGV==0){die $usage}

my ($threshold_HSP_distance, $threshold_Hit_cover_ratio, $threshold_score_ratio, $threshold_Hit_num, $threshold_species_num, $help_flag);
GetOptions(
    "threshold_HSP_distance:i" => \$threshold_HSP_distance,
    "threshold_Hit_cover_ratio:f" => \$threshold_Hit_cover_ratio,
    "threshold_score_ratio:f" => \$threshold_score_ratio,
    "threshold_Hit_num:i" => \$threshold_Hit_num,
    "threshold_species_num:i" => \$threshold_species_num,
    "help" => \$help_flag,
);
$threshold_HSP_distance ||= 5000;
$threshold_Hit_cover_ratio ||= 0.9;
$threshold_score_ratio ||= 0.4;
$threshold_Hit_num ||= 10;
$threshold_species_num ||= 2;

if ( $help_flag ) { die $usage }

# 读取所有的BLAST比对信息，合并HSPs。若一个Hit对应多个HSPs，则将多个HSPs合并为一个。合并时，去除和最优HSP比对方向不一致的HSPs，去除和最优HSP距离过远的HSPs，使用较好HSPs的覆盖范围作为起始和结束坐标，使用较好的HSPs的Score之和作为合并后的Score值，使用最优HSP的evalue值作为合并后的evalue值。
# 读取所有的BLAST比对信息。
my $input_file = abs_path($ARGV[0]);
open IN, $input_file or die "Can not open file $input_file, $!";
my %input_info;
while (<IN>) {
    @_ = split /\t/;
    $input_info{"$_[0]\t$_[1]"} .= $_;
}
close IN;

# 解析HSPs，并合并HSPs。一条基因组序列和一个同源蛋白的Hit，可能包含多个HSPs，对应多个多拷贝的基因区域。
my %combine_HSP_to_Hit;
foreach ( keys %input_info ) {
    my $output = &parsingHSP($input_info{$_});
    # 将一条基因组序列和一个同源蛋白的Hit信息，分割成多个不同的基因区域。在Blastx表格结果尾部增加一列Query_HSPs信息
    foreach ( split /\n/, $output ) {
        $combine_HSP_to_Hit{$_} = 1;
    }
    #print "$output\n";
}

# 对Hit进行索引
my (%index, %score, %evalue, %alignment_length, %hits_all, %query, %query_start, %query_end);
foreach my $line ( keys %combine_HSP_to_Hit ) {
    $hits_all{$line} = 1;
    @_ = split /\t/, $line;
    my ($start, $end) = ($_[6], $_[7]);
    ($start, $end) = ($end, $start) if $start > $end;
    $start = int($start / 1000);
    $end = int($end / 1000) + 1;
    # 让每个索引位点，额外包括侧翼1Kb的区域。
    $start --; $start = 0 if $start < 0; $end ++;
    foreach ( $start .. $end ) {
        $index{$_[0]}{$_}{$line} = 1;
        $score{$line} = $_[11];
        $evalue{$line} = $_[10];
        $alignment_length{$line} = abs($_[6] - $_[7]) + 1;
        $query{$line} = $_[0];
        $query_start{$line} = $_[6];
        $query_end{$line} = $_[7];
    }
}
close IN;

my %hits_filtered;
#print STDERR "Seq_ID\tIndex_Num\tHit_Num_in_this_round\tRemain_Hit_num\n";
foreach my $seq_ID ( sort keys %index ) {
    foreach my $index ( sort {$a <=> $b} keys %{$index{$seq_ID}} ) {
        my %hit = %{$index{$seq_ID}{$index}};
        #my $num1 = %hit; print STDERR "Round1: $seq_ID\t$index\t$num1\t$num1\n";
        next unless %hit;
        my @hit = sort { $evalue{$a} <=> $evalue{$b} or $score{$b} <=> $score{$a} or $alignment_length{$b} <=> $alignment_length{$a} or $a cmp $b } keys %hit;

        my %remain;
        while (@hit) {
            # 对一个目标Hit A进行分析，找到所有被目标Hit包含且匹配效果更差的Hits：evalue值 >= Hit A && score值 <= Hit A。由于经过了排序，Hit A就是evalue值最低(优)的。
            my $hit = shift @hit;
            #print STDERR "BEST HSP: $hit\n";
            my (%be_contained_hit, @hit_A_group_pos, %hit_A_group_hit);
            $be_contained_hit{$hit} = 1; 
            @_ = split /\t/, $hit;
            my $score = $_[11];
            foreach ( @hit ) {
                @_ = split /\t/;
                my $overlap_ratio = 0;
                $overlap_ratio = &cal_overlap_ratio($hit, $_);
                # 寻找和Hit A冗余的Hits
                if ( $overlap_ratio >= $threshold_Hit_cover_ratio ) {
                    # 第一步剔除方法：去除Score得分低于Hit A Score的一定比例（默认40%）Hits。
                    if ( $_[11] < $score * $threshold_score_ratio ) {
                        delete $hit{$_};
                        $hits_filtered{$_} = 1;
                        #print STDERR "DELETE1: $_\n";
                    }
                    elsif ( $_[11] < $score ) {
                        $be_contained_hit{$_} = 1;
                    }
                }
            }
            # 对冗余的Hits执行保留和删除操作
            my @be_contained_hit = sort { $evalue{$a} <=> $evalue{$b} or $score{$b} <=> $score{$a} or $alignment_length{$b} <=> $alignment_length{$a} or $a cmp $b } keys %be_contained_hit;
            my $keep_num = 0;
            my %species_num;
            foreach ( @be_contained_hit ) {
                # 第二步剔除方法：同一个物种最多保留指定数量（默认2个）的Hits。
                @_ = split /\t/;
                my $subject_species = $_[1];
                $subject_species = $1 if $_[1] =~ m/(species[a-zA-Z0-9]+)/i;
                $species_num{$subject_species} ++;
                if ( $species_num{$subject_species} > $threshold_species_num ) {
                    $hits_filtered{$_} = 1;
                    #print STDERR "DELETE2: $_\n";
                    next;
                }
                $keep_num ++;
                # 第三步剔除方法：最多保留指定数量（默认为10个）的较好Hits。
                if ( $keep_num > $threshold_Hit_num ) {
                    $hits_filtered{$_} = 1;
                    #print STDERR "DELETE3: $_\n";
                }
                else {
                    #print STDERR "Remain: $_\n";
                    $remain{$_} = 1;
                    push @hit_A_group_pos, ($_[6], $_[7]);
                    $hit_A_group_hit{$_} = 1;
                }
                delete $hit{$_};
            }
            # 得到Hit A group的区域，再于Blastx结果尾部增加一列Hit Group Region信息
            @hit_A_group_pos = sort {$a <=> $b} @hit_A_group_pos;
            foreach ( keys %hit_A_group_hit ) {
                $hits_all{$_} = "$_\t$hit_A_group_pos[0]-$hit_A_group_pos[-1]";
            }

            # 下一轮的Hits，则去除了所有被保留和被删除的Hits。
            @hit = sort { $evalue{$a} <=> $evalue{$b} or $score{$b} <=> $score{$a} or $alignment_length{$b} <=> $alignment_length{$a} or $a cmp $b } keys %hit;
            #my $hit_num = @hit; my $remain_num = %remain; print STDERR "RoundNext: $seq_ID\t$index\t$hit_num\t$remain_num\n";
        }
    }
}

foreach ( sort { $query{$a} cmp $query{$b} or $query_start{$a} <=> $query_start{$b} or $query_end{$a} <=> $query_end{$b} or $a cmp $b } keys %hits_all ) {
    print "$hits_all{$_}\n" unless exists $hits_filtered{$_};
}
my $hits_all_num = %hits_all;
my $hits_filtered_num = %hits_filtered;
my $remain_num = $hits_all_num - $hits_filtered_num;
print STDERR "Total Hits Number: $hits_all_num\nFiltered Hits Number: $hits_filtered_num\nRemained Hits Numer: $remain_num\n";

# 本程序用于计算Hit A和Hit B的重叠比例。前者是Evalue值更小的Hit。程序计算对B的覆盖率。
sub cal_overlap_ratio {
    my ($hitA, $hitB) = @_;
    #print STDERR "HitA: $hitA\nHitB: $hitB\n";

    # 得到Hit A和Hit B的HSPs信息
    my (@HSPA, @HSPB);
    @_ = split /\t/, $hitA;
    foreach ( split /,/, $_[-1] ) {
        push @HSPA, "$1\t$2" if m/(\d+)-(\d+)/;
        #print STDERR "HSPA:$1\t$2\n";
    }
    @_ = split /\t/, $hitB;
    foreach ( split /,/, $_[-1] ) {
        push @HSPB, "$1\t$2" if m/(\d+)-(\d+)/;
        #print STDERR "HSPB:$1\t$2\n";
    }

    # 计算Hit A和Hit B的重叠区域
    my @overlap;
    foreach my $HSPA ( @HSPA ) {
        my ($startA, $endA) = split /\t/, $HSPA;
        ($startA, $endA) = ($endA, $startA) if $startA > $endA;
        foreach my $HSPB ( @HSPB ) {
            my ($startB, $endB) = split /\t/, $HSPB;
            ($startB, $endB) = ($endB, $startB) if $startB > $endB;
            if ( $startA <= $endB && $startB <= $endA ) {
                my @sites = sort { $a <=> $b } ($startA, $endA, $startB, $endB);
                push @overlap, "$sites[1]\t$sites[2]";
            }
        }
    }
    #foreach (@overlap) { print STDERR "Overlap: $_\n"; }

    # 计算重叠部分和HitB的碱基数
    my $overlap_length = &match_length(@overlap);
    my $HSPB_length = &match_length(@HSPB);
    my $ratio = 0;
    $ratio = $overlap_length / $HSPB_length if $HSPB_length;
    #print STDERR "$overlap_length\t$HSPB_length\t$ratio\n";

    return $ratio;
}

sub match_length {
    my @inter_sorted_site;
    foreach (@_) {
        my @aaa = $_ =~ m/(\d+)/g;
        @aaa = sort { $a <=> $b } @aaa;
        push @inter_sorted_site, "$aaa[0]\t$aaa[1]";
    }
    @inter_sorted_site = sort { $a <=> $b } @inter_sorted_site;

    my $out_site_number;
    my $former_region = shift @inter_sorted_site;
    my @aaa = $former_region =~ m/(\d+)/g;
    $out_site_number += ($aaa[1] - $aaa[0] + 1);
    foreach (@inter_sorted_site) {
        my @former_region = $former_region =~ m/(\d+)/g;
        my @present_region = $_ =~ m/(\d+)/g;

        if ($present_region[0] > $former_region[1]) {
            $out_site_number += ($present_region[1] - $present_region[0] + 1);
            $former_region = $_;
        }
        elsif ($present_region[1] > $former_region[1]) {
            $out_site_number += ($present_region[1] - $former_region[1]);
            $former_region = $_;
        }
        else {
            next
        }
    }
    return $out_site_number;
}


# 本子程序用于解析HPSs，得到一个Hit结果。
sub parsingHSP {
    my $info = $_[0];
    chomp($info);

    # 去冗余。diamond软件可能存在bug，可能会出现相同的匹配区域出现两种不同的比对结果。这可能是由于对基因组数据进行分割和并行分析后，对相同基因组区域进行了两次分析，前后结果不一样导致。例如：
    # NC_029256.1     XP_002437861_1  35.48   372     138     102     6381589 6381819 289     365     1.7e-58 100.1   39.2    0.13    92.37
    # NC_029256.1     XP_002437861_1  41.53   366     121     93      6381589 6381819 289     365     5.9e-67 100.1   44.24   0.13    92.92
    my (%lines, @lines);
    foreach ( split /\n/, $info ) {
        @_ = split /\t/;
        $lines{"$_[0]\t$_[1]\t$_[6]\t$_[7]"}{$_} = $_[10];
    }
    foreach ( keys %lines ) {
        @_ = sort {$lines{$_}{$a} <=> $lines{$_}{$b}} keys %{$lines{$_}};
        push @lines, $_[0];
    }
    my %lines;
    foreach (@lines) { $lines{$_} = 1; }

    my @out;
    if ( @lines ) {
        # 寻找最佳HSP，最优的evalue和score值。
        my (%evalue, %score);
        foreach ( @lines ) {
            @_ = split /\t/;
            $evalue{$_} = $_[10];
            $score{$_} = $_[11];
        }
        @lines = sort {$evalue{$a} <=> $evalue{$b} or $score{$b} <=> $score{$a} or $a cmp $b} @lines;
        my $best_HSP = shift @lines;
        delete $lines{$best_HSP};

        # 通过最佳HSP，确定匹配方向。
        @_ = split /\t/, $best_HSP;
        my @best_field = @_;
        my ($direction_query, $direction_subject) = ("plus", "plus");
        $direction_query = "minus" if $_[6] > $_[7];
        $direction_subject = "minus" if $_[8] > $_[9];

        # 忽略和最佳HSP方向不一致的HSP，忽略和最佳HSP距离过远的HSP，分析目标HSPs的坐标位置。
        # 此轮忽略的HSPs，用于下一轮的Hit区域分析。因为对于多拷贝基因，其基因组序列和一个同源蛋白可能存在好几个匹配区域，而在比对结果中算一个Hit的多个HSP。此时应该将多个HSPs分割成不同的Hits。
        my @query_region = ("$_[6]-$_[7]");
        my @query_site = ($_[6], $_[7]);
        my @subject_site = ($_[8], $_[9]);
        my $score_out = $_[11];
        foreach (@lines) {
            @_ = split /\t/;
            my ($direction_query1, $direction_subject1) = ("plus", "plus");
            $direction_query1 = "minus" if $_[6] > $_[7];
            $direction_subject1 = "minus" if $_[8] > $_[9];
            if ($direction_query eq $direction_query1 && $direction_subject eq $direction_subject1) {
                @query_site = sort {$a <=> $b} @query_site;
                # 计算新的HSP和包含有最佳HSP的HSPs组合的距离。以确定新的HSP能否加入进来。
                my $distance = &get_distance($query_site[0], $query_site[-1], $_[6], $_[7]);
                if ( $distance <= $threshold_HSP_distance ) {
                    push @query_region, "$_[6]-$_[7]";
                    push @query_site, ($_[6], $_[7]);
                    push @subject_site, ($_[8], $_[9]);
                    $score_out += $_[11];
                    delete $lines{$_};
                }
            }
        }

        @query_site = sort {$a <=> $b} @query_site;
        @subject_site = sort {$a <=> $b} @subject_site;
        my $query_region = "$query_site[0]\t$query_site[-1]";
        my $subject_region = "$subject_site[0]\t$subject_site[-1]";
        $query_region = "$query_site[-1]\t$query_site[0]" if $direction_query eq "minus";
        $subject_region = "$subject_site[-1]\t$subject_site[0]" if $direction_subject eq "minus";

        ($best_field[6], $best_field[7]) = split /\t/, $query_region;
        ($best_field[8], $best_field[9]) = split /\t/, $subject_region;
        $best_field[11] = $score_out;
        # 在Hit尾部增加一列信息，Query的HSP匹配区域。
        push @best_field, join(",", @query_region);
        push @out, join("\t", @best_field);

        @lines = keys %lines;
    }
    return join("\n", @out);
    #print STDERR "$info\n" if @out >= 2;
}

sub get_distance {
    my $out = 0;
    if ( $_[0] <= $_[3] && $_[1] >= $_[2] ) {
        my $value1 = abs($_[2] - $_[1]) - 1;
        my $value2 = abs($_[0] - $_[3]) - 1;
        $out = $value1;
        $out = $value2 if $value2 < $value1;
        $out = 0 - $out;
    }
    elsif ( $_[2] > $_[1] )  {
        $out = $_[2] - $_[1] - 1;
    }
    elsif ( $_[0] > $_[3] ) {
        $out = $_[0] - $_[3] - 1;
    }
    return $out;
}
