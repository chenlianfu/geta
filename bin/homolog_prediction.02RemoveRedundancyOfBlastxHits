#!/usr/bin/env perl

use strict;
use Getopt::Long;
use Cwd qw/abs_path getcwd cwd/;

my $usage = <<USAGE;
Usage:
    $0 [options] blast.tab > filtered.tab

    对diamond blastx的结果去冗余。先后采用两种方法进行过滤：（1）若Hits之间有包含关系时，仅保留指定数量（默认为10个）的较好Hits；（2）当Hit A被包含于Hit B时，若Hit A的得分较低（默认低于Hit B得分的50%时）且Hit A的evalue更差时，去除较低得分的Hit A比对结果。
    对diamond blastx的结果进行过滤前，若一个Hit对应多个HSPs，则将多个HSPs合并为一个。合并时，去除和最优HSP比对方向不一致的HSPs，去除和最优HSP距离过远的HSPs，使用较好HSPs的覆盖范围作为起始和结束坐标，使用较好的HSPs的Score之和作为合并后的Score值，使用最优HSP的evalue值作为合并后的evalue值。

    --threshold_HSP_distance <int>    default: 5000
    设置HSP之间的距离阈值。去除和最优HSP之间距离超过--threshold_HSP_distance参数设置阈值（单位bp）的HSP。

    --threshold_num <int>    default: 10
    设置数量阈值。若Hits之间有包含关系时，仅保留指定数量（默认为10个）的较好Hits。分析过程分多步：（1）对和基因组3Kb窗口范围有重叠的所有Hits按匹配范围从大到小排序，然后依次进行后续分析；（2）若目标Hit包含有其它Hits，且其Evalue和Score都优于其它Hits，则对这些Hits按Evalue和Score进行排序，保留较好的指定数量（--threshold_num参数设置值）的Hits，删除其余较差的Hits；（3）对剩下未保留也未删除的Hits，延用第二步的策略，进一步的进行保留和删除操作，进行多轮直至分析完毕所有的Hit数据；（4）对整条基因组序列往后滑动，每次往后滑动1Kb距离，分析3Kb窗口，鉴定需要删除的的Hits信息。

    --threshold_ratio <float>    default: 0.4
    设置比例阈值。当两个BLAST Hits的匹配区域有包含关系时，A Hit包含B Hit，A Hit evalue优于B Hit evalue， 且B Hit Score / A Hit Score低于--threshold_ratio参数设置的阈值，则去除较低得分的比对结果。

    --help    default: None
    display this help and exit.

USAGE
if (@ARGV==0){die $usage}

my ($threshold_HSP_distance, $threshold_ratio, $threshold_num, $help_flag);
GetOptions(
    "threshold_HSP_distance:i" => \$threshold_HSP_distance,
    "threshold_ratio:f" => \$threshold_ratio,
    "threshold_num:i" => \$threshold_num,
    "help" => \$help_flag,
);
$threshold_HSP_distance ||= 5000;
$threshold_ratio ||= 0.4;
$threshold_num ||= 10;

if ( $help_flag ) { die $usage }

# 读取所有的BLAST比对信息，合并HSPs。若一个Hit对应多个HSPs，则将多个HSPs合并为一个。合并时，去除和最优HSP比对方向不一致的HSPs，去除和最优HSP距离过远的HSPs，使用较好HSPs的覆盖范围作为起始和结束坐标，使用较好的HSPs的Score之和作为合并后的Score值，使用最优HSP的evalue值作为合并后的evalue值。
# 读取所有的BLAST比对信息。
my $input_file = abs_path($ARGV[0]);
open IN, $input_file or die "Can not open file , $!";
my %input_info;
while (<IN>) {
    @_ = split /\t/;
    $input_info{"$_[0]\t$_[1]"} .= $_;
}
close IN;

# 解析HSP，并合并HSP。
my %output_info;
foreach ( keys %input_info ) {
    my $output = &parsingHSP($input_info{$_});
    $output_info{$_} = $output;
    #print "$output\n";
}

# 对Hit进行索引
my (%index, %score, %evalue, %alignment_length, %hits_all, %query, %query_start, %query_end);
foreach ( keys %output_info ) {
    my $line = $output_info{$_};
    $hits_all{$line} = 1;
    @_ = split /\t/, $line;
    my ($start, $end) = ($_[6], $_[7]);
    ($start, $end) = ($end, $start) if $start > $end;
    $start = int($start / 1000);
    $end = int($end / 1000) + 1;
    # 让每个索引位点，额外包括侧翼1Kb的区域。
    $start --; $start = 0 if $start < 0; $end ++;
    foreach ( $start .. $end ) {
        $index{$_[0]}{$_}{$line} = 1;
        $score{$line} = $_[11];
        $evalue{$line} = $_[10];
        $alignment_length{$line} = abs($_[6] - $_[7]) + 1;
        $query{$line} = $_[0];
        $query_start{$line} = $_[6];
        $query_end{$line} = $_[7];
    }
}
close IN;

my %hits_filtered;
#print STDERR "Seq_ID\tIndex_Num\tHit_Num\tRetained_Hit_num_after_--threshold_num\tRetained_Hit_num_after_--threshold_ratio\n";
foreach my $seq_ID ( sort keys %index ) {
    foreach my $index ( sort {$a <=> $b} keys %{$index{$seq_ID}} ) {
        my %hit = %{$index{$seq_ID}{$index}};
        my $num1 = %hit;
        #print STDERR "Round1: $seq_ID\t$index\t$num1\n";
        next unless %hit;
        my @hit = sort { $evalue{$a} <=> $evalue{$b} or $score{$b} <=> $score{$a} or $alignment_length{$b} <=> $alignment_length{$a} or $a cmp $b } keys %hit;

        my (%keep);
        # 根据 --threshold_num 阈值过滤BLAST Hits
        while (@hit) {
            # 对一个目标Hit进行分析，找到所有被目标Hit包含且匹配效果更差的Hits：evalue值 >= 目标Hit && score值 <= 目标Hit。
            my $hit = shift @hit;
            my %be_contained_hit;
            $be_contained_hit{$hit} = 1;
            @_ = split /\t/, $hit;
            my ($start, $end, $score) = ($_[6], $_[7], $_[11]);
            ($start, $end) = ($end, $start) if $start > $end;
            foreach ( @hit ) {
                @_ = split /\t/;
                my ($start1, $end1, $score1) = ($_[6], $_[7], $_[11]);
                ($start1, $end1) = ($end1, $start1) if $start1 > $end1;
                $be_contained_hit{$_} = 1 if ( $start1 >= $start && $end1 <= $end && $score1 <= $score );
            }
            # 对冗余的Hits执行保留和删除操作
            my @be_contained_hit = sort { $evalue{$a} <=> $evalue{$b} or $score{$b} <=> $score{$a} or $alignment_length{$b} <=> $alignment_length{$a} or $a cmp $b } keys %be_contained_hit;
            my $keep_num = 0;
            foreach ( @be_contained_hit ) {
                $keep_num ++;
                if ( $keep_num <= $threshold_num ) {
                    #print STDERR "KEEP: $keep_num\t$_\n";
                    $keep{$_} = 1;
                }
                else {
                    $hits_filtered{$_} = 1;
                    #print STDERR "DELETE: $keep_num\t$_\n";
                }
                delete $hit{$_};
            }
            # 下一轮的Hits，则去除了所有被保留和被删除的Hits。
            @hit = sort { $evalue{$a} <=> $evalue{$b} or $score{$b} <=> $score{$a} or $alignment_length{$b} <=> $alignment_length{$a} or $a cmp $b } keys %hit;
            #my $hit_num = @hit; print STDERR "Round: $seq_ID\t$index\t$hit_num\n";
        }
        
        %hit = %keep;
        # 根据 --threshold_ratio 阈值过滤BLAST Hits
        next unless %hit;
        my $num2 = %hit;
        my @hit = keys %hit;
        FF1: foreach my $hit ( @hit ) {
            @_ = split /\t/, $hit;
            my ($start, $end) = ($_[6], $_[7]);
            ($start, $end) = ($end, $start) if $start > $end;
            foreach ( keys %hit ) {
                @_ = split /\t/;
                my ($start1, $end1) = ($_[6], $_[7]);
                ($start1, $end1) = ($end1, $start1) if $start1 > $end1;
                if ( $start >= $start1 && $end <= $end1 && $evalue{$hit} > $evalue{$_} && $score{$hit} < $score{$_} * $threshold_ratio ) {
                    delete $hit{$hit};
                    $hits_filtered{$hit} = 1;
                    next FF1;
                }
            }
        }
        my $num3 = %hit;
        #print STDERR "STATS: $seq_ID\t$index\t$num1\t$num2\t$num3\n";
    }
}

foreach ( sort { $query{$a} cmp $query{$b} or $query_start{$a} <=> $query_start{$b} or $query_end{$a} <=> $query_end{$b} or $a cmp $b } keys %hits_all ) {
    print "$_\n" unless exists $hits_filtered{$_};
}
my $hits_all_num = %hits_all;
my $hits_filtered_num = %hits_filtered;
my $remain_num = $hits_all_num - $hits_filtered_num;
print STDERR "Total Hits Number: $hits_all_num\nFiltered Hits Number: $hits_filtered_num\nRemained Hits Numer: $remain_num\n";

# 本子程序用于解析HPSs，得到一个Hit结果。
sub parsingHSP {
    my $info = $_[0];
    chomp($info);
    my @lines = split /\n/, $info;

    # 寻找最佳HSP，最优的evalue和score值。
    my (%evalue, %score);
    foreach ( @lines ) {
        @_ = split /\t/;
        $evalue{$_} = $_[10];
        $score{$_} = $_[11];
    }
    @lines = sort {$evalue{$a} <=> $evalue{$b} or $score{$b} <=> $score{$a} or $a cmp $b} @lines;
    my $best_HSP = $lines[0];

    # 通过最佳HSP，确定匹配方向。
    my @best_field = split /\t/, $best_HSP;
    my ($direction_query, $direction_subject) = ("plus", "plus");
    $direction_query = "minus" if $best_field[6] > $best_field[7];
    $direction_subject = "minus" if $best_field[8] > $best_field[9];
    my ($query_start, $query_end) = ($_[6], $_[7]);

    # 去除和最佳HSP方向不一致的HSP，去除和最佳HSP距离过远的HSP，分析目标HSPs的坐标位置。
    my @query_site = ($query_start, $query_end);
    my @subject_site = ($_[8], $_[9]);
    my $score_out = 0;
    foreach (@lines) {
        @_ = split /\t/;
        my ($direction_query1, $direction_subject1) = ("plus", "plus");
        $direction_query1 = "minus" if $_[6] > $_[7];
        $direction_subject1 = "minus" if $_[8] > $_[9];
        if ($direction_query eq $direction_query1 && $direction_subject eq $direction_subject1) {
            my $distance = &get_distance($query_start, $query_end, $_[6], $_[7]);
            if ( $distance <= $threshold_HSP_distance ) {
                push @query_site, ($_[6], $_[7]);
                push @subject_site, ($_[8], $_[9]);
                $score_out += $score{$_};
            }
        }
    }

    @query_site = sort {$a <=> $b} @query_site;
    @subject_site = sort {$a <=> $b} @subject_site;
    my $query_region = "$query_site[0]\t$query_site[-1]";
    my $subject_region = "$subject_site[0]\t$subject_site[-1]";
    $query_region = "$query_site[-1]\t$query_site[0]" if $direction_query eq "minus";
    $subject_region = "$subject_site[-1]\t$subject_site[0]" if $direction_subject eq "minus";

    ($best_field[6], $best_field[7]) = split /\t/, $query_region;
    ($best_field[8], $best_field[9]) = split /\t/, $subject_region;
    $best_field[11] = $score_out;
    my $out = join "\t", @best_field;
    return $out;
}

sub get_distance {
    my $out = 0;
    if ( $_[0] <= $_[3] && $_[1] >= $_[2] ) {
        my $value1 = abs($_[2] - $_[1]) - 1;
        my $value2 = abs($_[0] - $_[3]) - 1;
        $out = $value1;
        $out = $value2 if $value2 < $value1;
        $out = 0 - $out;
    }
    elsif ( $_[2] > $_[1] )  {
        $out = $_[2] - $_[1] - 1;
    }
    elsif ( $_[0] > $_[3] ) {
        $out = $_[0] - $_[3] - 1;
    }
    return $out;
}
