#!/usr/bin/perl
use strict;
use Getopt::Long;

my $usage = <<USAGE;
Usage:
    $0 [options] BLAST_DB file.fasta > out.xml

    本程序能将输入FASTA文件中的序列分割成多份，每个fasta文件写出一条BLAST命令到command.blast.list文件中；然后程序调用ParaFly进行并行化计算；最后合并结果。本程序仅输出XML结果文件，后续推荐使用parsing_blast_result.pl程序进行过滤并转换成表格格式结果。

    --tmp_prefix <string>    default: blast
    设置临时文件或文件夹前缀。默认设置下，程序生成command.blast.list，blast.tmp/等临时文件或目录。

    --chunk_file <int>    default: 10
    设置每份数据文件中包含的序列条数。程序会将输入FASTA文件中的序列从前往后分割成多份，默认每10条相邻的序列分配到一个FASTA文件中。

    --chunk_dir <int>    default: 10
    设置每个数据文件夹中包含的Fasta文件个数。程序在临时文件夹下生成多个子文件夹，本参数设置每个子文件夹中存放的Fasta文件的个数，从而避免数据量大时文件夹下的文件数量过多，造成数据读取和写入慢的问题。
    请注意：若数据块的数量超过100万个，默认设置下临时文件夹中的目录数量太多（超过1万个），导致文件系统运行缓慢，ParaFly程序运行效率低下，无法充分利用服务器计算资源。此时推荐增大--chunk_dir和--chunk_file参数。

    --blast_program <string>    default: blastp
    设置运行的BLAST命令，支持的命令有：blastn, blastp, blastx, tblastn, tblastx。

    --CPU <int>    default: 1
    设置并行运行的BLAST程序个数。

    --blast_threads <int>    default: 1
    设置BLAST命令的-num_threads参数值。该参数让每个BLAST命令可以多线程运行。
    请注意：--blast_threads参数值和--CPU参数值的乘积不要超过服务器的CPU总计算线程数。

    --evalue <float>    default: 1e-3
    设置BLAST命令的-evalue参数值。

    --max_target_seqs <int>    default: 20
    设置BLAST命令的-max_target_seqs参数值。该参数设置BLAST最多能匹配数据库中的序列数量。

    --clean
    若添加该参数，则在运行程序成功后，会删除临时文件或文件夹。

USAGE
if (@ARGV==0){die $usage}

my ($tmp_prefix, $chunk_file, $chunk_dir, $blast_program, $CPU, $blast_threads, $evalue, $max_targetSeqs, $completed_ratio, $clean);
GetOptions(
    "tmp_prefix:s" => \$tmp_prefix,
    "chunk_file:i" => \$chunk_file,
    "chunk_dir:i" => \$chunk_dir,
    "blast_program:s" => \$blast_program,
    "CPU:i" => \$CPU,
    "blast_threads:i" => \$blast_threads,
    "evalue:f" => \$evalue,
    "max_target_seqs:i" => \$max_targetSeqs,
    "completed_ratio:f" => \$completed_ratio,
    "clean!" => \$clean,
);
$tmp_prefix ||= "blast";
$chunk_file ||= 10;
$chunk_dir ||= 10;
$blast_program ||= "blastp";
$CPU ||= 1;
$blast_threads ||= 1;
$evalue ||= 1e-3;
$max_targetSeqs ||= 20;
$completed_ratio ||= 1;

my %blast_program = ("blastn", 1, "blastp", 1, "blastx", 1, "tblastn", 1, "tblastx", 1);
if (! exists $blast_program{$blast_program}) {
    die "$blast_program was not a supportted BLAST command (blastn, blastp, blastx, tblastn, tblastx)!\n";
}

# 读取输入的FASTA文件的基因ID信息。
my (%seq, $seq_ID);
open IN, $ARGV[1] or die "Can not open the input file: $ARGV[1]\n$!\n";
while (<IN>) {
    chomp;
    if (m/^>(\S+)/) {
        $seq_ID = $1;
    }
    else {
        $seq{$seq_ID} .= $_;
    }
}
close IN;

# 检测已经存在的结果，将已经存在的结果放入到 $tmp_prefix.tmp/completed_result.out 中
my (%complete_gene_ID, $chunk_dir_number);
if ( -e "$tmp_prefix.tmp" ) {
    open OUT, ">", "$tmp_prefix.tmp/completed_result.out" or die "Can not create file $tmp_prefix.tmp/completed_result.out, $!";
    while ( <$tmp_prefix.tmp/*/*.out> ) {
        open IN, $_ or die "Can not open file $_, $!";
        while (<IN>) {
            print OUT;
            $complete_gene_ID{$1} = 1 if m#<Iteration_query-def>(\S+)</Iteration_query-def>#;
        }
        close IN;
    }
    close OUT;
    while ( <$tmp_prefix.tmp/*/*.fasta> ) {
        $chunk_dir_number = $1 if (m/chunk(\d+)/ && $1 > $chunk_dir_number);
    }
    $chunk_dir_number =~ s/^0*//;
}
else {
    mkdir "$tmp_prefix.tmp";
}
my $number = %complete_gene_ID;
#print STDERR "$number\n";

open CMD, ">", "$tmp_prefix.command.list" or die "Cannot create file command.$tmp_prefix.list, $!\n";
my ($fasta, @chunk);
my $gene_num_for_analysis = 0;
my ($number_dir, $number_file, $chunk_file_number) = (1, 0, 0);
$chunk_dir_number ++;
my $chunk_dir_name = "chunk" . '0' x (5 - length($chunk_dir_number)) . $chunk_dir_number;
mkdir "$tmp_prefix.tmp/$chunk_dir_name" unless -e "$tmp_prefix.tmp/$chunk_dir_name";
foreach my $gene_ID ( sort keys %seq ) {
    next if exists $complete_gene_ID{$gene_ID};
    $gene_num_for_analysis ++;
        
    $number_file ++;
    # 当文件中的序列数量超过阈值时，生成新的文件。
    if ($number_file > $chunk_file) {
        $chunk_file_number ++;
        my $chunk_file_name = '0' x (length($chunk_file) - length($chunk_file_number)) . $chunk_file_number;
        push @chunk, "$tmp_prefix.tmp/$chunk_dir_name/$chunk_file_name";
        open OUT, ">", "$tmp_prefix.tmp/$chunk_dir_name/$chunk_file_name.fasta" or die "Can not create file $tmp_prefix.tmp/$chunk_dir_name/$chunk_file_name.fasta, $!\n";
        print OUT $fasta;
        print CMD "$blast_program -query $tmp_prefix.tmp/$chunk_dir_name/$chunk_file_name.fasta -db $ARGV[0] -num_threads $blast_threads -evalue $evalue -outfmt 5 -max_target_seqs $max_targetSeqs -out $tmp_prefix.tmp/$chunk_dir_name/$chunk_file_name.out\n";
        close OUT;
        $number_file = 1;
        $number_dir ++;
        $fasta = "";
    }
    # 当子文件夹中的文件数量超过阈值时，生成新的子文件夹。
    if ($number_dir > $chunk_dir) {
        $chunk_dir_number ++;
        $chunk_dir_name = "chunk" . '0' x (5 - length($chunk_dir_number)) . $chunk_dir_number;
        mkdir "$tmp_prefix.tmp/$chunk_dir_name" unless -e "$tmp_prefix.tmp/$chunk_dir_name";
        $number_dir = 1;
        $chunk_file_number = 0;
    }

    $fasta .= ">$gene_ID\n$seq{$gene_ID}\n";
}
print STDERR "将对 $gene_num_for_analysis 条序列进行 $blast_program 分析。\n";

if ($fasta) {
    $chunk_file_number ++;
    my $chunk_file_name = '0' x (length($chunk_file) - length($chunk_file_number)) . $chunk_file_number;
    push @chunk, "$tmp_prefix.tmp/$chunk_dir_name/$chunk_file_name";
    open OUT, ">", "$tmp_prefix.tmp/$chunk_dir_name/$chunk_file_name.fasta" or die "Can not create file $tmp_prefix.tmp/$chunk_dir_name/$chunk_file_name.fasta, $!\n";
    print OUT $fasta;
    print CMD "$blast_program -query $tmp_prefix.tmp/$chunk_dir_name/$chunk_file_name.fasta -db $ARGV[0] -num_threads $blast_threads -evalue $evalue -outfmt 5 -max_target_seqs $max_targetSeqs -out $tmp_prefix.tmp/$chunk_dir_name/$chunk_file_name.out\n";
    close OUT;
}
close CMD;

my $cmdString = "ParaFly -c $tmp_prefix.command.list -CPU $CPU &> /dev/null";
print STDERR "CMD: $cmdString\n";
(system $cmdString) == 0 or warn "Warning: Failed to execute: $cmdString\n";

unshift @chunk, "$tmp_prefix.tmp/completed_result" if -e "$tmp_prefix.tmp/completed_result.out";
foreach (@chunk) {
    open IN, "$_.out" or die "Can not open file $_.out, $!\n";
    my $start = <IN>;
    foreach (1 .. 19) {
        $start .= <IN>;
    }
    my @lines = <IN>;
    my $end = pop @lines;
    $end = (pop @lines) . $end;
    $end = (pop @lines) . $end;
    #print "$start$end";

    my $one_interation;
    foreach (@lines) {
        $one_interation .= $_;
        if (m/^<\/Iteration>/) {
            $one_interation =~ s#<Iteration_iter-num>\d+</Iteration_iter-num>#<Iteration_iter-num>1</Iteration_iter-num>#;
            $one_interation =~ s#<Iteration_query-ID>.*?</Iteration_query-ID>#<Iteration_query-ID>Query_1</Iteration_query-ID>#;
            my $query_def = $1 if $one_interation =~ m#<Iteration_query-def>(.*?)</Iteration_query-def>#;
            my $query_len = $1 if $one_interation =~ m#<Iteration_query-len>(\d+)</Iteration_query-len>#;
            my $start_new = $start;
            $start_new =~ s#<BlastOutput_query-def>.*?</BlastOutput_query-def>#<BlastOutput_query-def>$query_def</BlastOutput_query-def>#;
            $start_new =~ s#<BlastOutput_query-len>\d+</BlastOutput_query-len>#<BlastOutput_query-len>$query_len</BlastOutput_query-len>#;
            #push @out, "$start_new$one_interation$end";
            print "$start_new$one_interation$end";
            $one_interation = "";
        }
    }

    close IN;
}

if ($clean) {
    unlink "command.$tmp_prefix.list";
    unlink "command.$tmp_prefix.list.completed";
    system `rm -rf $tmp_prefix.tmp`;
}
