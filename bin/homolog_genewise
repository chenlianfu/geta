#!/usr/bin/perl
use strict;
use File::Basename;
use Getopt::Long;

my $usage = <<USAGE;
Usage:
    perl $0 [options] homolog_proteins.fasta genome_seq.fasta

    程序分4步运行：
    1. 将genome_seq.fasta文件使用makeblastdb构建数据库。成功运行后生成文件makeblastdb.ok。
    2. 运行程序同目录下的para_blast程序并行化调用tblastn将homolog_proteins.fasta比对到数据库（阈值为evalue<=1e-9且覆盖率>=0.4）。成功运行后生成文件blast.ok和结果文件out.tab。
    3. 运行程序同目录下的homolog_blast2geneRegion对out.tab文件进行分析，找到gene region及其最优homolog。成功运行后生成文件blast2geneRegion.ok和结果文件homolog_gene_region.tab。
    4. 运行程序同目录下的homolog_geneRegion2genewise提取基因组的gene region序列，并行化调用genewise进行基因模型分析，生成最终结果文件genewise.gff。

    .ok 后缀的文件用于表明其步骤运行完毕。若重新运行时，检测到 .ok 文件存在，则跳过相应的步骤。

    --segmentSize <int>    default: 1000000
    --overlapSize <int>    default: 100000
    程序将基因组序列分割成单条进行blast数据库构建；若单条序列长度超过1Mb， 则将单条序列进行切割，分割成1Mb的序列后再进行blast数据库构建；此时，两条相邻的序列间重叠的长度为100kb。
    若不进行分割，tblasn进行比对时，有些序列能比对到基因组上很多不同的位置。即使设置很低的-max_target_seqs参数值，使比对结果的目标序列少，但是一条很长的序列上可以数百上千的匹配位点，导致比对非常耗时。

    --cpu <int>    default: 8
    设置blast和genewise命令的并行化运行数量。

    --coverage_ratio <float>    default: 0.4
    进行tblastn分析时，要求对同源蛋白的覆盖率不小于该值。

    --evalue <float>    default: 1e-9
    进行tblastn分析时，要求对同源蛋白的evalue值不大于该值。

    --max_gene_length <int>    default: 2000
    程序调用homolog_blast2geneRegion进行分析时，需要设置该参数。一个蛋白序列与某条基因组序列若存在多个BLAST匹配区域，若相邻匹配区之间的距离低于此参数值，则认为这两个匹配区隶属于一个基因。

USAGE
if (@ARGV==0){die $usage}

my ($cpu, $coverage_ratio, $evalue, $max_gene_length, $segmentSize, $overlapSize);
GetOptions(
    "cpu:i" => \$cpu,
    "coverage_ratio:f" => \$coverage_ratio,
    "evalue:f" => \$evalue,
    "max_gene_length:i" => \$max_gene_length,
    "segmentSize:i" => \$segmentSize,
    "overlapSize:i" => \$overlapSize,
);
$cpu ||= 8;
$coverage_ratio ||= 0.4;
$evalue ||= 1e-9;
$max_gene_length ||= 20000;
$segmentSize ||= 1000000;
$overlapSize ||= 100000;

my $homologProteinFastaFile = $ARGV[0];
my $genomeFastaFile = $ARGV[1];
my $path = dirname($0);

open IN, $genomeFastaFile or die $!;
my (%seq, $id);
while (<IN>) {
    chomp;
    if (/>(\S+)/) { $id = $1; }
    else { $seq{$id} .= $_; }
}
close IN;

# 对基因组序列进行分割。
unless (-e "genome.splitting_and_joining.fasta") {
    mkdir "tmp_for_genome_splitting_and_joining" unless -e "tmp_for_genome_splitting_and_joining";
    my @info_of_genome_splitting_and_joining;
    foreach my $seq_id (sort keys %seq) {
        my $seq = $seq{$seq_id};
        my $seq_length = length $seq;
        if ($seq_length > $segmentSize) {
            my @partion = &get_partition($seq_length, $segmentSize, $overlapSize);
            foreach (@partion) {
                my $start = $_ - 1;
                my $end = $start + $segmentSize;
                my $sub_seq = substr($seq, $start, $segmentSize);

                open OUT, ">", "tmp_for_genome_splitting_and_joining/$seq_id.$start.fasta" or die "Can not create file $seq_id.$start.fasta, $!\n";
                print OUT ">$seq_id\_start_$start\n$sub_seq\n";
                close OUT;
                push @info_of_genome_splitting_and_joining, "tmp_for_genome_splitting_and_joining/$seq_id.$start.fasta";
            }
        }
        else {
            open OUT, ">", "tmp_for_genome_splitting_and_joining/$seq_id.0.fasta" or die "Can not create file $seq_id.0.fasta, $!\n";
            print OUT ">$seq_id\_start_0\n$seq\n";
            close OUT;
            push @info_of_genome_splitting_and_joining, "tmp_for_genome_splitting_and_joining/$seq_id.0.fasta";
        }
    }

    open OUT, ">", "genome.splitting_and_joining.fasta" or die "Can not create file genome.splitting_and_joining.fasta, $!\n";
    foreach (@info_of_genome_splitting_and_joining) {
        open IN, $_ or die "Can not open file $_, $!\n";
        while (<IN>) {
            print OUT;
        }
        close IN;
    }
    close OUT;

    print STDERR "The genome sequences were splitted and joined, and the new genome file was created: genome.splitting_and_joining.fasta.\n";
}
else {
    print STDERR "The splitted and joined genome file genome.splitting_and_joining.fasta was existsed and used again\n";
}

my $cmdString = "makeblastdb -in genome.splitting_and_joining.fasta -dbtype nucl -title genome -parse_seqids -out genome &> makeblastdb.log";
print "CMD 1/4: $cmdString\n";
unless (-e "makeblastdb.ok") {
    system("$cmdString") == 0 or die "failed to execute: $cmdString\n";
    open OUT, ">", "makeblastdb.ok" or die $!; close OUT;
    print "1. Successfully Make Blast Database of genome.splitting_and_joining.fasta\n\n";
}
else {
    print "1. Skip CMD 1/4 for file makeblastdb.ok exists\n\n";
}

#$cmdString = "$path/homolog_paraBlast tblastn genome $homologProteinFastaFile 1e-5 $cpu out 6";
my $blast_thread = 1;
my $blastpl_CPU = int($cpu / $blast_thread + 0.5);
$blastpl_CPU = 1 if $blastpl_CPU < 1;
$cmdString = "$path/para_blast --chunk_file 30 --chunk_dir 30 --blast_threads $blast_thread --CPU $blastpl_CPU --blast_program tblastn --evalue 1e-5 genome $homologProteinFastaFile 1e-5 > out.xml 2> para_blast.log; $path/para_blast --chunk_file 1 --chunk_dir 30 --blast_threads $blast_thread --CPU $blastpl_CPU --blast_program tblastn --evalue 1e-5 genome $homologProteinFastaFile 1e-5 > out.xml 2>> para_blast.log; parsing_blast_result.pl --no-header --evalue $evalue --subject-coverage 0.000000001 --query-coverage $coverage_ratio out.xml > out.tab";
print "CMD 2/4: $cmdString\n";
unless (-e "blast.ok") {
    unlink "FailedCommands" if -e "FailedCommands";
    system("$cmdString") == 0 or die "failed to execute: $!\n";
    if ( -e "FailedCommands" ) { die "failed to execute: $cmdString\n"; }

    open IN, "out.tab" or die "Can not open file out.tab, $!\n";
    open OUT, ">", "out.correct.tab" or die "Can not create file out.correct.tab, $!\n";
    while (<IN>) {
        @_ = split /\t/;
        my $pos = 0;
        $pos = $1 if $_[1] =~ s/_start_(\d+)//;
        
        my $keep = 1;
        if ($_[8] < 1000) { $keep = 0; }
        if ($_[9] < 1000) { $keep = 0; }
        if (($segmentSize - $_[8] + 1) < 1000) { $keep = 0; }
        if (($segmentSize - $_[9] + 1) < 1000) { $keep = 0; }

        $_[8] += $pos;
        $_[9] += + $pos;
        print OUT (join "\t", @_);
    }
    close OUT;

    open OUT, ">", "blast.ok" or die $!; close OUT;
    print "2. Successfully align homolog to genome by tblastn\n\n";
}
else {
    print "2. Skip CMD 2/4: for file blast.ok exists\n\n";
}

$cmdString = "$path/homolog_blast2geneRegion out.correct.tab $homologProteinFastaFile $coverage_ratio $evalue $max_gene_length > homolog_gene_region.tab";
print "CMD 3/4: $cmdString\n";
unless (-e "blast2geneRegion.ok") {
    system("$cmdString") == 0 or die "failed to execute: $cmdString\n";
    open OUT, ">", "blast2geneRegion.ok" or die $!; close OUT;
    print "3. Successfully get homolog gene region information\n\n";
}
else {
    print "3. Skip CMD 3/4: for file blast2geneRegion.ok  exists\n\n";
}

open IN, "homolog_gene_region.tab";
my ($gene_total_length, $gene_number, $gene_avg_length) = (0, 0, 0);
while (<IN>) {
    @_ = split /\t/;
    $gene_total_length += ($_[2] - $_[1] + 1);
    $gene_number ++;
}
$gene_avg_length = int($gene_total_length / $gene_number) if $gene_number != 0;
print "    $gene_number gene regions, with average gene length $gene_avg_length\n";

$cmdString = "$path/homolog_geneRegion2genewise $genomeFastaFile $homologProteinFastaFile homolog_gene_region.tab $gene_avg_length $cpu > genewise.gff 2> genewise.start_info.txt";
print "CMD 4/4: $cmdString\n";
system("$cmdString") == 0 or die "failed to execute: $cmdString\n";
print "4. Successfully run genewise parally\n\n";
print "The final result file : genewise.gff\n\n";

sub get_partition {
    my ($length, $ss, $os) = @_;
    my @out;

    my $pos = 1;
    push @out, $pos;
    while (($pos + $ss - 1) < $length) {
        $pos = $pos + $ss - 1 - $os + 1;
        push @out, $pos;
    }

    return @out;
}
