#!/usr/bin/perl
use strict;
use Getopt::Long;

my $usage = <<USAGE;
Usage:
    perl $0 [options] file1.gff3 file2.gff3 ... > total.gff3

    读取输入GFF3格式文件中的中CDS和exon信息，在输出文件中添加UTR信息。
    有部分基因模型的尾部CDS不包含终止密码子，则对其要进行修正。
    添加gene或mRNA是否完整的信息。
    若GFF3文件含有可变剪接，也适用。
    可以输入多个文件，对其进行去冗余整合：（1）对输入的GFF3的基因模型进行分析，若相邻且在同一条链上的基因在CDS区上有重叠，则保留基因长度较大的那个基因模型；（2）若输入多个GFF3文件，保留先输入文件的基因；后输入文件的相同链上相邻的基因模型中，若有CDS区域和之前文件基因的CDS重叠，则过滤之。

    --gene_prefix <string>    default: gene
    设置gene ID前缀

    --genome <string>
    输入基因组fasta文件。该参数是必须的，用于修正尾部的CDS和基因完整性检测。

    --no_attr_add <bool>     default: None
    添加该参数，则不在GFF3文件第9列添加Source和Integrity信息。

USAGE
if(@ARGV==0){die $usage}

my ($gene_prefix, $genome, $no_attr_add);
GetOptions(
    "gene_prefix:s" => \$gene_prefix,
    "genome:s" => \$genome,
    "no_attr_add!" => \$no_attr_add,
);
$gene_prefix ||= "gene";
die "--genome should be set\n" unless $genome;

# 读取基因组序列
open IN, $genome or die $!;
my (%seq, $seq_id);
while (<IN>) {
    chomp;
    if (m/^>(\S+)/) {
        $seq_id = $1;
    }
    else {
        $seq{$seq_id} .= $_;
    }
}
close IN;

# 读取GFF3文件
my (%gff, %sort1, %sort2, %sort3, %sort4, %CDS);
foreach (@ARGV) {
    open IN, $_ or die $!;
    my (%gff_info, $id, %gene_length);
	my $keep = 0;
    while (<IN>) {
        next if m/^#/;
        next if m/^\s*$/;
        if (m/\tgene\t.*ID=([^;\s]+)/) {
            $id = $1;
            @_ = split /\t/;
            $sort1{$id} = $_[0];
            $sort2{$id} = $_[3];
            $sort3{$id} = $_[4];
            $sort4{$id} = $_[6];
            $gene_length{$id} = $_[4] - $_[3] + 1;
			$keep = 1;
        }
		elsif (! m/Parent=/) {
			$keep = 0;
		}
        $gff_info{$id} .= $_ if $keep == 1;
    }
    close IN;

    my %cds;
    foreach my $gene_id (keys %gff_info) {
        my $gff_info = $gff_info{$gene_id};
		unless ($gff_info =~ m/\tCDS\t/) {
			delete $gff_info{$gene_id};
			next;
		}
        foreach (split /\n/, $gff_info) {
            if (m/^(\S+?)\t.*\tCDS\t(\d+?)\t(\d+?)\t.*?\t(.*?)\t/) {
                my $index1 = int($2 / 1000); 
                my $index2 = int($3 / 1000); 
                foreach ($index1 .. $index2) { 
                    $cds{$1}{$4}{$_}{"$2\t$3"} = $gene_id;
                }
            }
        }
    }

    my %overlap;
    foreach my $gene_id (keys %gff_info) {
        my $gff_info = $gff_info{$gene_id};
        foreach (split /\n/, $gff_info) {
            if (m/^(\S+?)\t.*\tCDS\t(\d+?)\t(\d+?)\t.*?\t(.*?)\t/) {
                my $index1 = int($2 / 1000); 
                my $index2 = int($3 / 1000); 
                foreach my $index ( $index1 .. $index2 ) {
                    foreach (keys %{$cds{$1}{$4}{$index}}) {
                        @_ = split /\t/;
                        if ($_[1] >= $2 && $_[0] <= $3 && $gene_id ne $cds{$1}{$4}{$index}{$_}) {
                            $overlap{$gene_id}{$cds{$1}{$4}{$index}{$_}} = 1;
							#print STDERR "$gene_id\t$2\t$3\t$cds{$1}{$4}{$index}{$_}\t$_[0]\t$_[1]\n";
                        }
                    }    
                }
            }
        }
    }

    my %cluster;
    while (%overlap) {
        my %cluster_one;

        my @overlap = keys %overlap;
        my $one = shift @overlap;
        my @one;
        push @one, $one;

        while (@one) {
            $one = shift @one;
            $cluster_one{$one} = 1;
            if (exists $overlap{$one}) {
                foreach (keys %{$overlap{$one}}) {
                    push @one, $_;
                }
                delete $overlap{$one};
            }
        }

        my $cluster = join "\t", keys %cluster_one;
        $cluster{$cluster} = 1;
    }

    foreach my $cluster (keys %cluster) {
        my @genes = split /\t/, $cluster;
        @genes = sort {$gene_length{$b} <=> $gene_length{$a}} @genes;
        shift @genes;
        foreach (@genes) {
            delete $gff_info{$_};
			print STDERR "$cluster: delete $_\n";
        }
    }

	my @gene_id = keys %gff_info;
	foreach my $gene_id (@gene_id) {
		my $gff_info = $gff_info{$gene_id};
		foreach (split /\n/, $gff_info) {
			if (m/^(\S+?)\t.*\tCDS\t(\d+?)\t(\d+?)\t.*?\t(.*?)\t/) {
				my $index1 = int($2 / 1000); 
				my $index2 = int($3 / 1000); 
				foreach my $index ( $index1 .. $index2 ) {
					foreach (keys %{$CDS{$1}{$4}{$index}}) {
						@_ = split /\t/;
						if ($_[1] >= $2 && $_[0] <= $3 && $gene_id ne $CDS{$1}{$4}{$index}{$_}) {
							delete $gff_info{$gene_id};
							print STDERR "$gene_id\t$CDS{$1}{$4}{$index}{$_}: delete: $gene_id\n";
						}
					}
				}
			}
		}
	}

	foreach my $chr (keys %cds) {
		foreach my $strand (keys %{$cds{$chr}}) {
			foreach my $index (keys %{$cds{$chr}{$strand}}) {
				foreach (keys %{$cds{$chr}{$strand}{$index}}) {
					$CDS{$chr}{$strand}{$index}{$_} = $cds{$chr}{$strand}{$index}{$_};
				}
			}
		}
	}

	foreach (keys %gff_info) {
		$gff{$_} = $gff_info{$_};
	}
}

# 对基因按位置进行排序
my @id = sort {$sort1{$a} cmp $sort1{$b} or $sort2{$a} <=> $sort2{$b} or $sort3{$a} <=> $sort3{$b} or $sort4{$a} cmp $sort4{$b}} keys %gff;
my $total_number = @id;
$total_number = length $total_number;
my $number;

# 读取基因的exon和CDS信息，添加UTR信息。也适用于含有可变剪接的GFF3文件。
foreach my $gene_id (@id) {
	next unless $gene_id;
    my $gff_info = $gff{$gene_id};
	next unless $gff_info =~ m/\tCDS\t/;
    my $out;
    $number ++;

    # 对gene的ID进行修改
    my $id_out = $gene_prefix . 0 x ($total_number - (length $number)) . $number;
    $gff_info =~ s/(\tgene\t.*\tID=)$gene_id/$1$id_out/;
    $gff_info =~ s/;?\n/;\n/;
    $gff_info =~ s/(\tgene\t.*)/${1}Source=$gene_id;/ unless $no_attr_add;
    my $gene_integrity = "incomplete";

    # 将gene的所有信息分割成mRNA信息
    my (%gff_mRNA, @mRNA_id, $mRNA_id, %mRNA_line, $gene_out);
    foreach (split /\n/, $gff_info) {
        if (m/\tgene\t/) {
            $gene_out = $_;
        }
        elsif (m/\tmRNA\t.*ID=([^;\s]+)/) {
            $mRNA_id = $1;
            $mRNA_line{$mRNA_id} = $_;
            push @mRNA_id, $mRNA_id;
        }
        elsif (m/\tCDS\t/ or m/\texon\t/) {
            $gff_mRNA{$mRNA_id} .= "$_\n";
        }
    }

    # 对mRNA信息进行分析：验证是否完整、修改ID、添加UTR
    my $mRNA_number = 0;
    foreach (@mRNA_id) {
        my $gff_mRNA = $gff_mRNA{$_};
		next unless $gff_mRNA =~ m/\tCDS\t/;
        $mRNA_number ++;

        # 修改mRNA的ID和Parent信息。
        my $transcript_id = "$id_out.t$mRNA_number";
        my $mRNA_line = $mRNA_line{$_};
        $mRNA_line =~ s/ID=[^;\s]+;?//;
        $mRNA_line =~ s/Parent=[^;\s]+;?//;
        $mRNA_line =~ s/\t([^\t]*)$/\tID=$transcript_id;Parent=$id_out;$1/;

        # 修改CDS和exon的ID和Parent信息。若没有exon信息，则根据CDS信息得到exon信息。
        $gff_mRNA = &change_id($gff_mRNA, $transcript_id);

        # 进行基因完整性验证。
        my %info = &cdsIncludeStopCodon_and_integrity($gff_mRNA, $transcript_id);
        $gff_mRNA = $info{"info"};
        my $integrity = $info{"integrity"};
        $gene_integrity = "complete" if $integrity eq "complete";

        $mRNA_line =~ s/;?$/;Integrity=$integrity;/ unless $no_attr_add;
        $out .= "$mRNA_line\n";

        # 添加UTR信息。
        $gff_mRNA = &addUTR($gff_mRNA, $transcript_id);

        my $sortgff = &sortgff($gff_mRNA);
        $out .= $sortgff;
    }

    $gene_out =~ s/;?$/;Integrity=$gene_integrity;/ unless $no_attr_add;
    print "$gene_out\n$out\n";
}

sub sortgff {
    my $out;
    my $info = $_[0];
    my @line = split /\n/, $info;
    @_ = split /\t/, $line[0];
    my $strand = $_[6];
    my %sort;
    foreach (@line) {
        @_ = split /\t/;
        if ($_[2] eq "gene") {
            $out .= "$_\n";
        }
        elsif ($_[2] eq "mRNA") {
            $out .= "$_\n";
        }
        elsif ($_[2] eq "CDS" or $_[2] eq "exon" or $_[2] eq "five_prime_UTR" or $_[2] eq "three_prime_UTR") {
            $sort{$_} = $_[3];
        }
    }

    if ($strand eq "+") {
        foreach (sort {$sort{$a} <=> $sort{$b} or $b cmp $a } keys %sort) {
            $out .= "$_\n";
        }
    }
    elsif ($strand eq "-") {
        foreach (sort {$sort{$b} <=> $sort{$a} or $b cmp $a } keys %sort) {
            $out .= "$_\n";
        }
    }
    
    return $out;
}

sub change_id {
    my $info = $_[0];
    my $gene_id = $_[1];

    my @line = split /\n/, $info;
    @_ = split /\t/, $line[0];
    my $strand = $_[6];

    my (%cds, %exon);
    foreach (@line) {
        s/\t[^\t]+$//;
        @_ = split /\t/;
        if (m/\tCDS\t/) {
            $cds{$_} = $_[3];
        }
        elsif (m/\texon\t/) {
            $exon{$_} = $_[3];
        }
    }

    my (@cds, @exon);
    if ($strand eq "+") {
        @cds = sort {$cds{$a} <=> $cds{$b}} keys %cds;
        @exon = sort {$exon{$a} <=> $exon{$b}} keys %exon;
    }
    elsif ($strand eq "-") {
        @cds = sort {$cds{$b} <=> $cds{$a}} keys %cds;
        @exon = sort {$exon{$b} <=> $exon{$a}} keys %exon;
    }

    my $out;
    my $cds_num = 0;
    foreach (@cds) {
        $cds_num ++;
        $out .= "$_\tID=$gene_id.CDS$cds_num;Parent=$gene_id;\n";
        unless (@exon) {
            s/\tCDS\t/\texon\t/;
            $out .= "$_\tID=$gene_id.exon$cds_num;Parent=$gene_id;\n";
        }
    }
    my $exon_num = 0;
    foreach (@exon) {
        $exon_num ++;
        $out .= "$_\tID=$gene_id.exon$exon_num;Parent=$gene_id;\n";
    }

    return $out;
}

sub addUTR {
    my $info = $_[0];
    my $gene_id = $_[1];

    my @line = split /\n/, $info;
    @_ = split /\t/, $line[0];
    my ($seqID, $strand) = ($_[0], $_[6]);

    my (@cds, @exon, @utr, %cds_pos);
    foreach (@line) {
        @_ = split /\t/;
        if ($_[2] eq 'CDS') {
            push @cds, "$_[3]\t$_[4]";
            $cds_pos{$_[3]} = 1;
            $cds_pos{$_[4]} = 1;
        }
        elsif ($_[2] eq 'exon') {
            push @exon, "$_[3]\t$_[4]";
        }
    }

    foreach (@exon) {
        my ($start, $end) = split /\t/;
        my $utr_keep = 1;
        foreach (@cds) {
            @_ = split /\t/;
            if ($_[0] <= $end && $_[1] >= $start) {
                $utr_keep = 0;
                if ($start < $_[0] && $end == $_[1]) {
                    my $utr_start = $start;
                    my $utr_end = $_[0] - 1;
                    push @utr, "$utr_start\t$utr_end";
                }
                elsif ($start == $_[0] && $end > $_[1]) {
                    my $utr_start = $_[1] + 1;
                    my $utr_end = $end;
                    push @utr, "$utr_start\t$utr_end";
                }
            }
        }
        push @utr, $_ if $utr_keep == 1;
    }

    my @cds_pos = sort {$a <=> $b} keys %cds_pos;
    my ($utr5num, $utr3num);
    if ($strand eq "+") {
        @utr = sort {$a <=> $b} @utr;
        foreach (@utr) {
            @_ = split /\t/;
            if ($_[1] <= $cds_pos[0]) {
                $utr5num ++;
                $info .= "$seqID\t\.\tfive_prime_UTR\t$_\t\.\t$strand\t\.\tID=$gene_id.5UTR$utr5num;Parent=$gene_id;\n";
            }
            elsif ($_[0] >= $cds_pos[1]) {
                $utr3num ++;
                $info .= "$seqID\t\.\tthree_prime_UTR\t$_\t\.\t$strand\t\.\tID=$gene_id.3UTR$utr3num;Parent=$gene_id;\n";
            }
        }
    }
    elsif ($strand eq "-") {
        @utr = sort {$b <=> $a} @utr;
        foreach (@utr) {
            @_ = split /\t/;
            if ($_[0] >= $cds_pos[1]) {
                $utr5num ++;
                $info .= "$seqID\t\.\tfive_prime_UTR\t$_\t\.\t$strand\t\.\tID=$gene_id.5UTR$utr5num;Parent=$gene_id;\n";
            }
            elsif ($_[1] <= $cds_pos[0]) {
                $utr3num ++;
                $info .= "$seqID\t\.\tthree_prime_UTR\t$_\t\.\t$strand\t\.\tID=$gene_id.3UTR$utr3num;Parent=$gene_id;\n";
            }
        }
    }

    return $info;
}
sub cdsIncludeStopCodon_and_integrity {
    # 输入一个genemodel的GFF3信息
    my $info = $_[0];
    my $gene_id = $_[1];
    my @line = split /\n/, $info;
    @_ = split /\t/, $line[0];
    my ($seqID, $strand) = ($_[0], $_[6]);

    my @cds;
    foreach (@line) {
        @_ = split /\t/;
        push @cds, "$_[3]\t$_[4]\t$_[7]" if $_[2] eq 'CDS';
    }
    @cds = sort { $a <=> $b } @cds;
    @_ = split /\t/, $cds[0];
    my $frame = $_[2];

    my $cds_seq;
    foreach (@cds) {
        @_ = split /\t/;
        my $start = $_[0] - 1;
        my $len = $_[1] - $start;
        $cds_seq .= substr($seq{$seqID}, $start, $len);
    }

    if ($strand eq "-") {
        @_ = split /\t/, $cds[-1];
        $frame = $_[2];
        $cds_seq = reverse $cds_seq;
        $cds_seq =~ tr/ATCGatcg/TAGCTAGC/;
    }

    $cds_seq =~ s/^\w{$frame}//;
    my $pep_seq = &cds2pep($cds_seq, $gene_id);

    unless ($pep_seq =~ m/\*$/) {
        my $next_codon;
        if ($strand eq "+") {
            my ($start, $end, $frame) = split /\t/, $cds[-1];
            $frame = ($end + 1 - $start - $frame) % 3;
            $frame = 1 if $frame == 2;
            $frame = 2 if $frame == 1;
            if ($frame == 0) {
                my $codon = substr($seq{$seqID}, $end, 3);
                #print "OK1:\t$gene_id\t$frame\t$seqID\t$start\t$end\t$codon\n";
                if ($codon eq "TAA" or $codon eq "TGA" or $codon eq "TAG") {
                    my $end3 = $end + 3;
                    #print "$info\n";
                    $info =~ s/^(\S+\t\S+\t\S+\t\d+)\t$end\t/$1\t$end3\t/mg;
                    #print "$info\n";
                    $pep_seq .= '*';
                }
            }
        }
        elsif ($strand eq "-") {
            my ($start, $end, $frame) = split /\t/, $cds[0];
            $frame = ($end + 1 - $start - $frame) % 3;
            $frame = 1 if $frame == 2;
            $frame = 2 if $frame == 1;
            if ($frame == 0 && $start > 3) {
                my $codon = substr($seq{$seqID}, ($start - 4), 3);
                $codon = reverse $codon;
                $codon =~ tr/ATCGatcg/TAGCTAGC/;
                #print "OK2:\t$gene_id\t$frame\t$seqID\t$start\t$end\t$codon\n";
                if ($codon eq "TAA" or $codon eq "TGA" or $codon eq "TAG") {
                    my $start3 = $start - 3;
                    #print "$info\n";
                    $info =~ s/^(\S+\t\S+\t\S+)\t$start\t/$1\t$start3\t/mg;
                    #print "$info\n";
                    $pep_seq .= '*';
                }
            }
        }
    }

    my ($integrity, $start_ok, $end_ok);
    if ($pep_seq =~ m/^M/) {$start_ok = 1}
    if ($pep_seq =~ m/\*$/) {$end_ok = 1}
    if ($start_ok == 1 && $end_ok == 1) { $integrity = "complete" }
    elsif ($start_ok == 1 && $end_ok != 1) { $integrity = "3prime_partial" }
    elsif ($start_ok != 1 && $end_ok == 1) { $integrity = "5prime_partial" }
    elsif ($start_ok != 1 && $end_ok != 1) { $integrity = "internal" }

    my %out;
    $out{"info"} = $info;
    $out{"integrity"} = $integrity;
    return %out;
}

sub cds2pep {
    my %cds2pep = (
        "TTT" => "F",
        "TTC" => "F",
        "TTA" => "L",
        "TTG" => "L",
        "TCT" => "S",
        "TCC" => "S",
        "TCA" => "S",
        "TCG" => "S",
        "TAT" => "Y",
        "TAC" => "Y",
        "TAA" => "*",
        "TAG" => "*",
        "TGT" => "C",
        "TGC" => "C",
        "TGA" => "*",
        "TGG" => "W",
        "CTT" => "L",
        "CTC" => "L",
        "CTA" => "L",
        "CTG" => "L",
        "CCT" => "P",
        "CCC" => "P",
        "CCA" => "P",
        "CCG" => "P",
        "CAT" => "H",
        "CAC" => "H",
        "CAA" => "Q",
        "CAG" => "Q",
        "CGT" => "R",
        "CGC" => "R",
        "CGA" => "R",
        "CGG" => "R",
        "ATT" => "I",
        "ATC" => "I",
        "ATA" => "I",
        "ATG" => "M",
        "ACT" => "T",
        "ACC" => "T",
        "ACA" => "T",
        "ACG" => "T",
        "AAT" => "N",
        "AAC" => "N",
        "AAA" => "K",
        "AAG" => "K",
        "AGT" => "S",
        "AGC" => "S",
        "AGA" => "R",
        "AGG" => "R",
        "GTT" => "V",
        "GTC" => "V",
        "GTA" => "V",
        "GTG" => "V",
        "GCT" => "A",
        "GCC" => "A",
        "GCA" => "A",
        "GCG" => "A",
        "GAT" => "D",
        "GAC" => "D",
        "GAA" => "E",
        "GAG" => "E",
        "GGT" => "G",
        "GGC" => "G",
        "GGA" => "G",
        "GGG" => "G",
    );
    my $seq = shift @_;
    my $gene = shift @_;
    my $pep;
    while ((length $seq) >= 3) {
        $seq =~ s/(\w{3})//;
        if (exists $cds2pep{$1}) {
            $pep .= $cds2pep{$1};
        }
        else {
            $pep .= 'X';
        }
    }
    #print STDERR "Warning: CDS length of $gene is not multiple of 3\n" if (length $seq) > 0;
    #print STDERR "Warning: Stop Codon appear in the middle of $gene\n" if $pep =~ m/\*\w/;
    return $pep;
}
