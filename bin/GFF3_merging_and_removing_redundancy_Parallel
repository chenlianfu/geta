#!/usr/bin/env perl

use strict;
use Getopt::Long;
use Cwd qw/abs_path getcwd cwd/;
use File::Basename;

my $bin_path = dirname($0);

my $usage = <<USAGE;
Usage:
    $0 [options] genome.fasta in1.gff3 in2.gff3 in3.gff3 ... > out.gff3 

    本程序用于将输入的一个或多个GFF3文件中的基因模型，进行去冗余处理，对基因模型进行打分并挑选更可信的结果。

    程序运行原理：
    (1) 程序对所有输入的基因模型进行打分。首先，按CDS长度进行打分，每bp长度记1分，得到初步得分S；然后，根据intron数量打分，每增加一个intron，增加一定比例(相对S)得分，第一个intron增加分数最多，后续的intron增加的分数按比例递减，且所有intron增加的得分之和不超过S；然后，按基因完整性打分，5'端完整，增加一定比例(相对S)得分，3'端完整，增加一定比例(相对S)得分；最后，按输入文件的先后顺序，第一个输入文件，增加一定比例(相对S)得分，第二个输入文件分值不变。
    (2) 当两个基因模型在CDS上有重叠，对其中任意一个基因模型重叠比例超过阈值时，则根据两个基因模型的打分，去除较低得分的基因模型。程序会首先找到两两重叠的基因类群，再对类群中的基因模型按得分从大到小进行去冗余处理。
    (3) 本程序和标准程序GFF3_merging_and_removing_redundancy的运行结果一致。相应的，本程序多了--cpu和--tmp_dir参数，能将输入数据按染 色体和正负链进行分割，然后调用同目录下的parafly和GFF3_merging_and_removing_redundancy程序进行并行化运算，最后合并结果。

    程序使用须知：
    (1) 程序需要输入基因组序列，用于检测基因模型的完整性。
    (2) 本程序接受输入带可变剪接的GFF3文件，对一个基因的多个转录本进行打分后，选其中得分最高转录本的CDS信息的作为基因的信息，再和其它基因模型进行重叠分析和得分比较。
    (3) 本程序输入的多个GFF3文件中不能有ID一致的基因，否则结果不准确。

    --intron_score <float>    default: 0.3
    设置intron让基因模型得分提升比例。基因模型的一个intron让得分增加比例 = 该参数值；第二个及其它intron让得分增加比例 = (1 - 该参数值) ** (intron序号 - 1)。即多个intron让得分提升的比例呈一个无限等比数列，其首项 = 该参数值，公比 = (1 - 该参数值)，无限等比数列的和 = 1。默认设置下，首项 = 0.3，公比 = 0.7，即第一个intron让得分增加30%，第二个intron让得分增加21%，第三个intron让得分增加14.7%，第四个10.29%，以此类推，最终所有intron让得分增加比例不会超过100%。

    --complete5p_score <float>    default: 0.5
    设置基因模型在5'端完整时得分增加比例。

    --complete3p_score <float>    default: 0.5
    设置基因模型在3'端完整时得分增加比例。

    --first_file_score <float>    default: 0.5
    设置第一个输入文件额外增加的得分比例。有利于优先选择第一个输入GFF3文件中的基因模型。

    --overlap_coverage <float>    default: 0.30
    设置一个覆盖度阈值。当两个基因型模型对应转录本的CDS重叠区碱基数 / 较小基因模型CDS去冗余碱基数 > 该覆盖度阈值时， 则需要去除冗余的基因模型。

    --start_codon <string>    default: ATG
    设置起始密码子。若有多个起始密码子，则使用逗号分割。

    --stop_codon <string>    default: TAA,TAG,TGA
    设置终止密码子。若有多个终止密码子，则使用逗号分割。

    --tmp_dir <string>    default: tmp_\$date\$pid
    程序运行时临时文件夹名称。程序运行完毕后，会自当删除此临时文件夹。

    --cpu <int>    default: 8
    设置并行数。

    --help    default: None
    display this help and exit.

    --chinese_help    default: None
    使用该参数后，程序给出中文用法并退出。

USAGE
my $usage_english = &get_usage_english();
if (@ARGV==0){die $usage_english}

my ($intron_score, $complete5p_score, $complete3p_score, $first_file_score, $overlap_coverage, $start_codon, $stop_codon, $tmp_dir, $cpu, $help, $chinese_help);
GetOptions(
    "intron_score:f" => \$intron_score,
    "complete5p_score:f" => \$complete5p_score,
    "complete3p_score:f" => \$complete3p_score,
    "first_file_score:f" => \$first_file_score,
    "overlap_coverage:f" => \$overlap_coverage,
    "start_codon:s" => \$start_codon,
    "stop_codon:s" => \$stop_codon,
    "tmp_dir:s" => \$tmp_dir,
    "cpu:i" => \$cpu,
    "help" => \$help,
    "chinese_help" => \$chinese_help,
);
if ( $chinese_help ) { die $usage }
if ( $help ) { die $usage_english }

########### 解析参数 #################
# 使用绝对路径
my $input_genome = abs_path(shift @ARGV);
my @input_GFF3;
foreach ( @ARGV ) {
    push @input_GFF3, abs_path($_);
}

my $date = `date +%Y%m%d%H%M%S`; chomp($date);
$tmp_dir ||= "tmp_$date$$";
$tmp_dir = abs_path($tmp_dir);
mkdir $tmp_dir unless -e $tmp_dir;

# 设置参数的默认值
$cpu ||= 8;
$intron_score = 0.3 unless defined $intron_score;
$complete5p_score = 0.5 unless defined $complete5p_score;
$complete3p_score = 0.5 unless defined $complete3p_score;
$first_file_score = 0.5 unless defined $first_file_score;
$overlap_coverage = 0.3 unless defined $overlap_coverage;
$start_codon ||= "ATG";
$stop_codon ||= "TAA,TAG,TGA";
my (%start_codon, %stop_codon);
foreach (split /,/, $start_codon) { $start_codon{$_} = 1; }
foreach (split /,/, $stop_codon) { $stop_codon{$_} = 1; }

my $cmdString_pre = "$bin_path/GFF3_merging_and_removing_redundancy --intron_score $intron_score --complete5p_score $complete5p_score --complete3p_score $complete3p_score --first_file_score $first_file_score --overlap_coverage $overlap_coverage --start_codon $start_codon --stop_codon $stop_codon";
###############################

# 读取基因组序列
open IN, $input_genome or die "Error: Can not open file $input_genome, $!";
my (%seq, $seq_ID, @seq_ID);
while (<IN>) {
    chomp;
    if ( m/^>(\S+)/ ) { $seq_ID = $1; push @seq_ID, $seq_ID unless exists $seq{$seq_ID}; }
    else { tr/atcgn/ATCGN/; $seq{$seq_ID} .= $_; }
}
close IN;

# 读取GFF3文件
my ($GFF3_order, @input_GFF3_name, %GFF3_info);
foreach ( @input_GFF3 ) {
    $GFF3_order ++;
    push @input_GFF3_name, "input$GFF3_order";
    open IN, $_ or die "Error: Can not open file $_, $!";
    while ( <IN> ) {
        next if m/^#/;
        next if m/^\s*$/;
        @_ = split /\t/;
        $GFF3_info{$_[0]}{$_[6]}{"input$GFF3_order"} .= $_;
    }
    close IN;
}

# 进行数据分割
my @out_file;
unless ( -e "$tmp_dir/split.ok" && -s "$tmp_dir/out.list" ) {
    # 输出LIST文件，包含命令行
    open CMD, ">", "$tmp_dir/command.list" or die "Error: Can not create file $tmp_dir/command.list, $!";
    # 输出LIST文件，包含分割数据的输出文件路径
    open LIST, ">", "$tmp_dir/out.list" or die "Error: Can not create file $tmp_dir/out.list, $!";
    # 每个分隔的文件以数字编号命名
    my $seq_order = 0;
    foreach my $chr ( @seq_ID )  {
        $seq_order ++;
        # 输出基因组序列
        open OUT, ">", "$tmp_dir/seq$seq_order.genome.fasta" or die "Error: Can not create file $tmp_dir/seq$seq_order.genome.fasta, $!";
        print OUT ">$chr\n$seq{$chr}\n";
        close OUT;
    
        # 按正负链分割GFF3文件
        foreach my $strand ( sort keys %{$GFF3_info{$chr}} ) {
            my $strand_name = "plus";
            $strand_name = "minus" if $strand eq '-';
            my @input_files;
            # 对多个输入的GFF3文件进行数据分割
            foreach my $name ( @input_GFF3_name ) {
                # 设置输出GFF3路径，包含序列编号、GFF3编号、正负链信息。
                my $output = "$tmp_dir/seq$seq_order.$name.$strand_name.gff3";
                push @input_files, $output;
                open OUT, ">", $output or die "Error: Can not create file $output, $!";
                print OUT $GFF3_info{$chr}{$strand}{$name};
                close OUT;
            }
            # 每条序列的正负链输出命令和结果文件路径。
            print CMD "$cmdString_pre $tmp_dir/seq$seq_order.genome.fasta " . join(" ", @input_files) . " > $tmp_dir/seq$seq_order.$strand_name.gff3\n"; 
            print LIST "$tmp_dir/seq$seq_order.$strand_name.gff3\n";
            push @out_file, "$tmp_dir/seq$seq_order.$strand_name.gff3";
        }
    }
    close CMD; close LIST;

    open OUT, ">", "$tmp_dir/split.ok" or die $!; close OUT;
}
# 分割数据完成后，中断程序后重新运行时，可以跳过数据分割步骤，直接检测输出文件路径信息。
else {
    open IN, "$tmp_dir/out.list" or die "Can not open file $tmp_dir/out.list, $!";
    while ( <IN> ) {
        chomp;
        push @out_file, $_;
    }
}

# 并行化运行程序
my $cmdString = "$bin_path/parafly -c $tmp_dir/command.list -CPU $cpu &> $tmp_dir/parafly.log";
(system $cmdString) == 0 or die "Failed to execute: $cmdString\n";

# 汇总结果，并按坐标排序
my (%gene_info, %sort1, %sort2, %sort3, %sort4, $gene_ID);
foreach ( @out_file ) {
    open IN, $_ or die "Error: Can not open file $_, $!";
    while ( <IN> ) {
        next if m/^\s*$/;
        if ( /\tgene\t.*ID=([^;\s]+)/ ) {
            $gene_ID = $1;
            @_ = split /\t/;
            $sort1{$gene_ID} = $_[0];
            $sort2{$gene_ID} = $_[3];
            $sort3{$gene_ID} = $_[4];
            $sort4{$gene_ID} = $_[6];
        }
        $gene_info{$gene_ID} .= $_;
    }
    close IN;
}

my @gene_ID = sort { $sort1{$a} cmp $sort1{$b} or $sort2{$a} <=> $sort2{$b} or $sort3{$a} <=> $sort3{$b} or $sort4{$a} cmp $sort4{$b} or $a cmp $b } keys %gene_info;
foreach my $gene_ID ( @gene_ID ) {
    print "$gene_info{$gene_ID}\n";
}

my $cmdString = "rm -rf $tmp_dir";
(system $cmdString) == 0 or die "Failed to execute: $cmdString\n";


sub get_usage_english {

my $usage = <<USAGE;
Usage:
    $0 [options] genome.fasta in1.gff3 in2.gff3 in3.gff3 ...  > out.gff3 

    This program is designed to get rid of any unnecessary repetition in one or more GFF3 files containing gene models, evaluate the gene models, and choose the most reliable results.

    Here's how the program works:
    (1) It scores all input gene models. First, it gives points based on CDS length, with 1 point for each base pair, resulting in an initial score S. Then, it scores based on intron number, adding a certain percentage (relative to S) for each additional intron. The first intron adds the most points and subsequent ones add fewer proportionally. Also, the total points from all introns cannot exceed S. Next, it scores based on gene integrity by adding a certain percentage (relative to S) for a complete 5' end and another percentage for a complete 3' end. Finally, it adds a certain percentage (relative to S) to the score of the first input file while keeping the second input file's score unchanged. 
    (2) If two gene models overlap in the CDS and the overlap ratio of either model exceeds the threshold, the lower-scoring gene model will be removed based on their scores. First, the program will find gene clusters that overlap, and then it will remove redundant gene models within those clusters based on their scores from highest to lowest.
    (3) This program works just like the standard GFF3_merging_and_removing_redundancy program, but it also includes the --cpu and --tmp_dir options. These options allow the input data to be divided by chromosome and positive/negative strands, and then run parafly and GFF3_merging_and_removing_redundancy programs in the same directory for parallel processing. Finally, the results are combined.

    Usage instructions:
    (1) The program needs a genome sequence as input to check the integrity of gene models.
    (2) This program can take in a GFF3 file with alternative splicing, score multiple transcripts of a gene, choose the CDS information from the transcript with the highest score as the gene's information, and then compare its overlap and scores with other gene models.
    (3) When you input multiple GFF3 files into this program, make sure there are no genes with the same ID, or else the results won't be accurate.

    --intron_score <float>    default: 0.3
    Set introns to increase the score of gene models proportionally. The increase in score of a gene model due to one intron = the parameter value; the increase in score of a gene model due to the second and other introns = (1 - the parameter value) ** (intron index - 1). That is, the increase in score due to multiple introns forms an infinite geometric series, with the first term = the parameter value, common ratio = (1 - the parameter value), and the sum of the infinite geometric series = 1. By default, the first term = 0.3, common ratio = 0.7, so the first intron increases the score by 30%, the second intron by 21%, the third intron by 14.7%, the fourth by 10.29%, and so on, until the increase in score due to all introns does not exceed 100%.

    --complete5p_score <float>    default: 0.5
    Set the gene model to increase the score proportionally when the 5' end is complete.

    --complete3p_score <float>    default: 0.5
    Set the gene model to increase the score proportionally when the 3' end is complete.

    --first_file_score <float>    default: 0.5
    Set the additional score percentage for the first input file. This helps prioritize gene models from the first input GFF3 file.

    --overlap_coverage <float>    default: 0.30
    Set a coverage threshold. Suppose the number of base pairs in the overlapping region of CDS between two gene models exceeds the coverage threshold divided by the number of redundant base pairs in the CDS of the smaller gene model. In that case, we need to remove the redundant gene model.

    --start_codon <string>    default: ATG
    Set the start codon. If there are multiple start codons, separate them with commas.

    --stop_codon <string>    default: TAA,TAG,TGA
    Set the stop codon. If there are multiple stop codons, separate them with commas.

    --tmp_dir <string>    default: tmp_\$date\$pid
    Enter the path of temporary folder.

    --cpu <int>    default: 8
    Enter the number of CPU threads.

    --help    default: None
    display this help and exit.

    --chinese_help    default: None
    display the chinese usage and exit.

USAGE

return $usage;
}
