#!/usr/bin/env perl

use strict;
use Getopt::Long;
use Cwd qw/abs_path getcwd cwd/;
use File::Basename;

my $binPath = dirname($0);

my $usage = <<USAGE;
Usage:
    $0 [options] homolog_proteins.fasta genome_seq.fasta > out.gff

    --out_prefix <string>    default: out
    设置输出文件前缀。程序默认输出如下文件：（1）out.diamond.tab，将基因组序列和同源蛋白进行dimond blastx比对的结果文件；（2）out.

    --segmentSize <int>    default: 1000000
    --overlapSize <int>    default: 100000
    程序将基因组较长的序列进行分割，以加快diamond blastx的并行化比对速度；若单条序列长度超过1Mb， 则将单条序列进行切割，两条相邻的序列间重叠的长度为100kb。

    --max_hits_num_per_match_region <int>    default: 10
    设置基因组上一个同源匹配区域（一个基因区域）的最大同源蛋白的匹配数量。

    --max_hit_num_per_single_species <int>    default: 2
    设置基因组上一个同源匹配区域（一个基因区域）和单个物种的最大同源蛋白的匹配数量。让一个基因区域尽量和多个物种的同源蛋白都有比对结果，利于后续的一致性预测结果分析，并根据一致性结果的数量判断结果的可靠性。该参数生效需要输入的同源蛋白FASTA文件头部中包含物种名称信息。程序识别蛋白序列名称中的关键词species（大小写均可以识别）及其后的字符[a-zA-Z0-9]作为物种名称。例如XP_002436309_2_SpeciesSorghumBicolor，程序识别其物种名称为SpeciesSorghumBicolor。

    --cpu <int>    default: 8
    设置diamond程序使用线程数，genewise或gth命令运行的并行数。

    --identity <float>    default: 0.2
    --evalue <float>    default: 1e-9
    --subject_coverage <float>    default: 0.3
    设置对diamond blastx比对结果进行过滤的Identity、E-value和subject_coverage阈值。

    --method <string>    default: exonerate
    设置进行基因预测的方法，其值可以设定为exonerate、genewise、gth或all。若需要同时使用多种方法，则输入使用逗号分割的多个值；若使用所有三种方法进行分析，可以设置--method参数值为all，但最消耗计算时间。

    --genetic_code <int>    default: 1
    设置遗传密码。该参数对应的值请参考NCBI Genetic Codes: https://www.ncbi.nlm.nih.gov/Taxonomy/Utils/wprintgc.cgi。

    --tmp_dir <string>    default: tmp_\$date\$pid
    程序运行时临时文件夹名称。

    --help    default: None
    display this help and exit.

USAGE
if (@ARGV==0){die $usage}

my ($out_prefix, $segmentSize, $overlapSize, $max_hits_num_per_match_region, $max_hit_num_per_single_species, $cpu, $identity, $evalue, $subject_coverage, $method, $genetic_code, $tmp_dir, $help_flag);
GetOptions(
    "out_prefix:s" => \$out_prefix,
    "segmentSize:i" => \$segmentSize,
    "overlapSize:i" => \$overlapSize,
    "max_hits_num_per_match_region:i" => \$max_hits_num_per_match_region,
    "max_hit_num_per_single_species:i" => \$max_hit_num_per_single_species,
    "cpu:i" => \$cpu,
    "identity:f" => \$identity,
    "evalue:f" => \$evalue,
    "subject_coverage:f" => \$subject_coverage,
    "method:s" => \$method,
    "genetic_code:i" => \$genetic_code,
    "tmp_dir:s" => \$tmp_dir,
    "help" => \$help_flag,
);
$out_prefix ||= "out";
$segmentSize ||= 1000000;
$overlapSize ||= 100000;
$max_hits_num_per_match_region ||= 10;
$max_hit_num_per_single_species ||= 2;
$cpu ||= 8;
$identity ||= 0.2;
$evalue ||= 1e-9;
$subject_coverage ||= 0.3;
my %method;
$method = "exonerate,gth,genewise" if $method eq "all";
foreach ( split /,/, $method ) {
    warn "Warning: The method $_ is not correct.\n" unless ( $_ eq "exonerate" or $_ eq "genewise" or $_ eq "gth" );
}
$genetic_code ||= 1;
my $date = `date +%Y%m%d%H%M%S`; chomp($date);
$tmp_dir ||= "tmp_$date$$";
$tmp_dir = abs_path($tmp_dir);
mkdir $tmp_dir unless -e $tmp_dir;

if ( $help_flag ) { die $usage }

my $input_protein = abs_path($ARGV[0]);
my $input_genome = abs_path($ARGV[1]);

my $pwd = `pwd`; print STDERR "##########\nPWD (Current Directory): $pwd";
print STDERR (localtime) . "CMD (Main Program): $0 " . join(" ", @ARGV) . "\n##########\n\n";


# 1. 运行diamond分析，寻找蛋白序列和参考基因组的匹配位点。
print STDERR "1. align genome sequences against homolog proteins through diamond software.\n";
chdir $tmp_dir;
my $pwd = `pwd`; print STDERR "PWD: $pwd";
my $cmdString = "$binPath/homolog_prediction.01ParaDiamondBlastx --segmentSize $segmentSize --overlapSize $overlapSize --max_hits_num_per_match_region $max_hits_num_per_match_region --cpu $cpu --identity $identity --evalue $evalue --subject_coverage $subject_coverage --genetic_code $genetic_code --tmp_dir a.para_diamond $input_protein $input_genome > $out_prefix.diamond.tab 2> a.para_diamond.log";
unless (-e "1.paraDiamond.ok" && -e "$out_prefix.diamond.tab") {
    print STDERR (localtime) . ": CMD: $cmdString\n";
    system("$cmdString") == 0 or die "failed to execute: $cmdString\n";
    open OUT, ">", "1.paraDiamond.ok" or die $!; close OUT;
}
else {
    print STDERR "CMD(Skipped): $cmdString\n";
}
# 2. 进行基因预测。
$cmdString = "$binPath/homolog_prediction.03hitToGenePrediction --cpu $cpu --method $method --genetic_code $genetic_code --tmp_dir b.hitToGenePrediction $input_protein $input_genome out.diamond.tab > out.geneModels.tab";
unless (-e "2.hitToGenePrediction.ok" && -s "out.gff") {
    print STDERR (localtime) . ": CMD: $cmdString\n";
    system("$cmdString") == 0 or die "failed to execute: $cmdString\n";
    open OUT, ">", "2.hitToGenePrediction.ok" or die $!; close OUT;
}
else {
    print STDERR "CMD(Skipped): $cmdString\n";
}
# 4. 调用gth(genomethreader)进行基因预测。
# 5. 合并所有的基因预测结果，若一个区域有多个蛋白预测的结果，取其一致性结果。
