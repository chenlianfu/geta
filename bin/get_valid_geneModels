#!/usr/bin/env perl

use strict;
use Getopt::Long;
use Cwd qw/abs_path getcwd cwd/;
use File::Basename;

my $usage = <<USAGE;
Usage:
    $0 [options] transcriptID_for_filtering.txt transcriptID_validating_passed.tab geneModels.gb.gff3 geneModels.ge.gff3 geneModels.gf_AS.gff3 2> get_valid_geneModels.log

    程序输入第一个文件是需要过滤的转录本ID，主要包含两列信息；程序输入的第二个文件是转录本序列经过HMM和BLASTP比对的结果；后面再接多个GFF3文件，对这些GFF3文件中的基因模型进行过滤。
    程序根据transcriptID_for_filtering.txt和transcriptID_validating_passed.tab解析需要过滤的基因或需要转换为lncRNA的转录本。过滤掉不可靠的基因，在标准输出中得到有效的基因模型结果，在标准错误输出给出统计结果。

    程序运行步骤：
    (1) 根据transcriptID_for_filtering.txt文件内容找到因如下原因需要过滤的所有转录本ID。
        (a) CDS占转录本长度比例较低（默认 < 0.3）的转录本；
        (b) CDS长度较短（默认 < 600 bp）的转录本；
        (c) CDS和重复序列区域重叠比例较高（默认 >= 30%）的转录本；
        (d) 没有足够证据支持基因的所有转录本；
        (e) 没法填补完整基因的所有转录本；
        (f) 通过填补而完整基因的所有转录本。
    (2) 根据transcriptID_validating_passed.tab文件内容和GFF3文件信息来确定需要过滤的基因和需要转换为lncRNA的转录本。
        若某基因的所有转录本都在transcriptID_for_filtering.txt文件中有记录，且都未能通过验证，则对该基因进行过滤。在相应的被过滤GFF3信息第九列增加Filter开头的标签进行标记。
        有些CDS占转录本长度比例较低（默认 < 0.3）的转录本，若未能通过验证，则标记为lncRNA。将mRNA的feature名称修改为lnc_RNA。
    (3) 输出结果文件。
        geneModels.coding.gff3             高质量的蛋白编码基因，部分转录本可能属于lnc_RNA。
        geneModels.lncRNA.gff3             被过滤且包含lnc_RNA的基因，部分或全部转录本可能属于lnc_RNA。
        geneModels.lowQuality.gff3         所有转录本都因为b-f五种原因被过滤的低质量基因。

    --out_prefix    default: geneModels
    程序输出3个文件，本参数设置输出文件的前缀。

    --retain_Filling2Complete    default: None
    添加该参数后，保留未通过验证的Filling2Complete基因模型(这些基因模型未被其它方式过滤)。有些来自于evidence不完整的基因模型在强制补齐后，虽未通过HMM和BLASTP验证，也将其强制保留。

    --discard_Filling2Uncomplete    default: None
    添加该参数后，舍弃通过了验证的Filling2Uncomplete基因模型。有些来自于evidence不完整的基因模型未能强制补齐，虽然通过了HMM和BLASTP验证，将其强制舍弃。

    --help    default: None
    display this help and exit.

USAGE
if (@ARGV==0){die $usage}

my ($help_flag, $out_prefix, $retain_Filling2Complete, $discard_Filling2Uncomplete);
GetOptions(
    "help" => \$help_flag,
    "out_prefix:s" => \$out_prefix,
    "discard_Filling2Uncomplete" => \$discard_Filling2Uncomplete,
    "retain_Filling2Complete" => \$retain_Filling2Complete,
);
$out_prefix ||= "geneModels";
if ( $help_flag ) { die $usage }

########## 1. 读取第一个文件 ##########
my $inputFile_transcriptID_for_filtering = shift @ARGV;
open IN, $inputFile_transcriptID_for_filtering or die "Can not open file $inputFile_transcriptID_for_filtering, $!";
# 分析得到需要过滤的候选基因及其对应的所有转录本ID，候选的lncRNA的转录本ID。
my (%candidate_gene, %candidate_transcript_ID, %filtered_reason_of_gene, %candidate_lncRNA_transcript_ID, %candidate_lncRNA_gene_ID, %filtered_reason_of_gene_num, %all_gene_ID, %all_transcript_ID, $CDS_Ratio_reason_name, %filtered_reason_of_transcript);
while (<IN>) {
    chomp;
    @_ = split /\t/;
    $_[2] = "True" unless $_[2];
    if ( $retain_Filling2Complete ) {
        next if $_[1] eq "Filling2Complete";
    }
    $filtered_reason_of_transcript{$_[0]}{"Filtered_for_$_[1]"} = $_[2];
    $all_transcript_ID{$_[0]} = 1;
    $all_gene_ID{$1} = 1 if $_[0] =~ m/(.*)\.t\d+/;
    if ( $_[1] =~ m/^CDS_Ratio/ ) {
        $CDS_Ratio_reason_name = $_[1];
        $candidate_lncRNA_transcript_ID{$_[0]} = $_[2];
        $candidate_lncRNA_gene_ID{$1}{$_[0]} = $_[2] if $_[0] =~ m/(.*)\.t\d+/;
    }
    else {
        if ( $_[0] =~ m/(.*)\.t\d+/ ) {
            $candidate_gene{$1}{$_[0]} = 1;
            $candidate_transcript_ID{$_[0]} = 1;
            $filtered_reason_of_gene{$1}{$_[1]} = 1;
            $filtered_reason_of_gene_num{$_[1]}{$1}{$_[0]} = 1;
            #print STDERR "$1\t$_[0]\n";
        }
    }
}
close IN;

# 统计有问题的基因极其转录本数量。
my $num_of_all_gene_ID = 0; $num_of_all_gene_ID = %all_gene_ID;
my $num_of_all_transcript_ID = 0; $num_of_all_transcript_ID = %all_transcript_ID;
print STDERR "有 $num_of_all_gene_ID 个基因的 $num_of_all_transcript_ID 个转录本可能存在问题，需要进行HMM或BLASTP验证。";

########## 2. 读取第二个文件 ##########
my $inputFile_transcriptID_validating_passed = shift @ARGV;
open IN, $inputFile_transcriptID_validating_passed or die "Can not open file $inputFile_transcriptID_validating_passed, $!";
# 得到所有的有效的转录本ID。
<IN>;
my (%valid_gene_ID, %valid_transcript_ID);
while (<IN>) {
    @_ = split /\t/;
    $valid_transcript_ID{$_[0]} = 1;
    $valid_gene_ID{$1} = 1 if $_[0] =~ m/(.*)\.t\d+/;
}
close IN;

# 统计有比对结果的基因和转录本数量。
my $num_of_valid_gene_ID = 0; $num_of_valid_gene_ID = %valid_gene_ID;
my $num_of_valid_transcript_ID = 0; $num_of_valid_transcript_ID = %valid_transcript_ID;
print STDERR "结果：有 $num_of_valid_gene_ID 个基因的 $num_of_valid_transcript_ID 转录本通过了验证。\n";

########## 3. 读取GFF3文件 ##########
# 将程序后输入的多个文件内容合并到一个文件中。
open OUT, ">", "GFF3_extract_TranscriptID_for_filtering.$$.gff3" or die "Can not create file GFF3_extract_TranscriptID_for_filtering.$$.gff3, $!";
foreach ( @ARGV ) {
    open IN, $_ or die "Can not open file $_, $!";
    print OUT <IN>;
    close IN;
}
close OUT;

# 读取所有的GFF3信息
my %gene_info = &get_geneModels_from_GFF3("GFF3_extract_TranscriptID_for_filtering.$$.gff3");

# 获取基因和转录本的对应关系
my %transcriptID_of_gene;
foreach my $gene_ID ( sort keys %gene_info ) {
    foreach my $mRNA_ID ( @{$gene_info{$gene_ID}{"mRNA_ID"}} ) {
        $transcriptID_of_gene{$gene_ID}{$mRNA_ID} = 1;
    }
}

########## 4. 分析并统计需要过滤的基因 ##########
# 统计lncRNA数量
my $num_of_candidate_lncRNA_transcript_ID = %candidate_lncRNA_transcript_ID;
my $num_of_candidate_lncRNA_gene_ID = %candidate_lncRNA_gene_ID;

# 分析要过滤的基因及其数量。
my ( %filtered_gene_ID, %num_of_filtered_reason, %gene_have_lncRNA, %lncRNA_gene_ID_validating_failed, %transcript_is_lncRNA );
foreach my $gene_ID ( keys %all_gene_ID ) {
    if ( exists $candidate_gene{$gene_ID} ) {
        my $filter = 1;
        # 默认情况下，候选基因需要过滤；（1）但只要该基因对应的任何转录本能有HMM或BLASTP比对结果，则不需要过滤。
        foreach my $mRNA_ID ( keys %{$transcriptID_of_gene{$gene_ID}} ) {
            $filter = 0 if exists $valid_transcript_ID{$mRNA_ID};
        }
        # 默认情况下，候选基因需要过滤；（2）但只要该基因对应的任何一个转录本未在transcriptID_for_filtering.txt中有记录，则不需要过滤。
        foreach my $mRNA_ID ( keys %{$transcriptID_of_gene{$gene_ID}} ) {
            $filter = 0 unless exists $all_transcript_ID{$mRNA_ID};
        }
        # 若存在 --discard_Filling2Uncomplete 参数，则强制舍弃不完整基因模型。
        if ($discard_Filling2Uncomplete) {
            $filter = 1 if exists $filtered_reason_of_gene{$gene_ID}{"Filling2Uncomplete"};
        }
        if ( $filter == 1 ) {
            foreach ( keys %{$filtered_reason_of_gene{$gene_ID}} ) {
                $num_of_filtered_reason{$_} ++;
                $filtered_gene_ID{$gene_ID}{$_} = 1;
            }
        }
    }
    if ( exists $candidate_lncRNA_gene_ID{$gene_ID} ) {
        my ($if_lncRNA, $all_lncRNA) = (0, 1);
        # 只要该基因对应的任何转录本没有HMM或BLASTP比对结果，则认为该基因包含lncRNA。
        foreach my $mRNA_ID ( keys %{$candidate_lncRNA_gene_ID{$gene_ID}} ) {
            if ( exists $valid_transcript_ID{$mRNA_ID} ) {
                $all_lncRNA = 0;
            }
            else {
                $if_lncRNA = 1;
                $transcript_is_lncRNA{$mRNA_ID} = 1;
            }
        }
        $gene_have_lncRNA{$gene_ID} = 1 if $if_lncRNA == 1;
        $lncRNA_gene_ID_validating_failed{$gene_ID} = 1 if ($all_lncRNA == 1 && ! exists $filtered_gene_ID{$gene_ID} && ! exists $valid_gene_ID{$gene_ID}); 
    }
}
my $num_of_gene_have_lncRNA = %gene_have_lncRNA;
my $num_of_lncRNA_gene_ID_validating_failed = %lncRNA_gene_ID_validating_failed;
print STDERR "其中，有 $num_of_candidate_lncRNA_gene_ID 个基因，其对应的 $num_of_candidate_lncRNA_transcript_ID 个转录本因 $CDS_Ratio_reason_name 原因可能属于lncRNA。对这些转录本对应的蛋白序列进行HMM或BLASTP验证。若不能比对成功，则认为是lncRNA。有 $num_of_gene_have_lncRNA 个基因包含lncRNA转录本；有 $num_of_lncRNA_gene_ID_validating_failed 个基因的问题转录本全是lncRNA且不因其它五种原因过滤。若后续分析过程中这些基因不包含其它正常mRNA，则认为这些基因是lncRNA基因，\n";

my $num_of_candidate_gene = 0; $num_of_candidate_gene = %candidate_gene;
my $num_of_candidate_transcript_ID = 0; $num_of_candidate_transcript_ID = %candidate_transcript_ID;
my $out_stats;
foreach my $reason ( sort keys %filtered_reason_of_gene_num ) {
    my ($number1, $number2) = (0, 0);
    foreach ( keys %{$filtered_reason_of_gene_num{$reason}} ) {
        $number1 ++;
        $number2 += keys %{$filtered_reason_of_gene_num{$reason}{$_}};
    }
    $out_stats .= sprintf("    因 %-29s 原因对 %6s 个基因 %6s 个转录本的蛋白序列进行分析，有 %6s 个基因未能通过验证。\n", $reason, $number1, $number2, $num_of_filtered_reason{$reason});
}
my $num_of_filtered_gene_ID = 0; $num_of_filtered_gene_ID = %filtered_gene_ID;
print STDERR "其中，有 $num_of_candidate_gene 个基因因如下原因需要考虑过滤。对其相应的 $num_of_candidate_transcript_ID 个转录本的蛋白序列进行HMM或BLASTP验证。结果：有 $num_of_filtered_gene_ID 个基因未能通过验证。\n";
print STDERR $out_stats;

open OUT, ">", "aa1"; foreach ( keys %valid_gene_ID ) { print OUT "$_\n"; } close OUT;
open OUT, ">", "aa2"; foreach ( keys %filtered_gene_ID ) { print OUT "$_\n"; } close OUT;
open OUT, ">", "aa3"; foreach ( keys %lncRNA_gene_ID_validating_failed ) { print OUT "$_\n"; } close OUT;

print STDERR "\n########## 简洁统计 ##########\n";
print STDERR "# 有 $num_of_all_gene_ID 个基因的 $num_of_all_transcript_ID 个转录本可能存在问题，需要进行HMM或BLASTP验证。结果表明：\n";
print STDERR "#     有 $num_of_valid_gene_ID 个基因的 $num_of_valid_transcript_ID 转录本通过了验证，属于编码基因；\n";
print STDERR "#     有 $num_of_filtered_gene_ID 个基因属于b-f五种原因被过滤的低质量基因；\n";
print STDERR "#     有 $num_of_lncRNA_gene_ID_validating_failed 个基因的问题转录本全是lncRNA且不因其它五种原因过滤。\n";
print STDERR "##############################\n";


########## 5. 输出过滤后的结果 #########
my (%geneModelsID_coding, %geneModelsID_lncRNA1, %geneModelsID_lncRNA2, %geneModelsID_lowQuality);

foreach my $gene_ID ( sort keys %gene_info ) {
    # 判断基因是否属于 lncRNA 基因：（1）因五种原因被过滤且包含lncRNA的基因；（2）未因五种原因被过滤且所有转录本都属于lncRNA的基因。
    if ( exists $gene_have_lncRNA{$gene_ID} ) {
        if ( exists $filtered_gene_ID{$gene_ID} ) {
            $geneModelsID_lncRNA1{$gene_ID} = 1;
        }
        elsif ( exists $lncRNA_gene_ID_validating_failed{$gene_ID} )  {
            my $if_lncRNA_gene = 1;
            foreach my $mRNA_ID ( @{$gene_info{$gene_ID}{"mRNA_ID"}} ) {
                $if_lncRNA_gene = 0 unless exists $candidate_lncRNA_transcript_ID{$mRNA_ID};
            }
            if ( $if_lncRNA_gene == 1 ) {
                $geneModelsID_lncRNA2{$gene_ID} = 1;
            }
            else {
                $geneModelsID_coding{$gene_ID} = 1;
            }
        }
        else {
            $geneModelsID_coding{$gene_ID} = 1;
        }
    }
    # 判断基因是否属于低质量基因
    elsif ( exists $filtered_gene_ID{$gene_ID} ) {
        $geneModelsID_lowQuality{$gene_ID} = 1;
    }
    else {
        $geneModelsID_coding{$gene_ID} = 1;
    }
}

# 输出编码蛋白基因模型
open OUT, ">", "$out_prefix.coding.gff3" or die "Can not create file $out_prefix.coding.gff3, $!";
foreach my $gene_ID ( sort keys %geneModelsID_coding ) {
    my $gene_header = $gene_info{$gene_ID}{"header"};
    my $out = $gene_header;
    foreach my $mRNA_ID ( @{$gene_info{$gene_ID}{"mRNA_ID"}} ) {
        my $mRNA_header = $gene_info{$gene_ID}{"mRNA_header"}{$mRNA_ID};
        my $mRNA_info = $gene_info{$gene_ID}{"mRNA_info"}{$mRNA_ID};
        if ( exists $transcript_is_lncRNA{$mRNA_ID} ) {
            $mRNA_header =~ s/\tmRNA\t/\tlnc_RNA\t/;
            foreach ( sort keys %{$filtered_reason_of_transcript{$mRNA_ID}} ) {
                my $added_attr = "$_=$filtered_reason_of_transcript{$mRNA_ID}{$_}";
                $mRNA_header = &add_attr($mRNA_header, $added_attr);
            }
            $mRNA_info =~ s/.*\tCDS.*\n//g;
        }
        $out .= $mRNA_header;
        $out .= $mRNA_info;
    }
    print OUT "$out\n";
}
close OUT;

# 输出 lncRNA 基因模型
open OUT, ">", "$out_prefix.lncRNA.gff3" or die "Can not create file $out_prefix.lncRNA.gff3, $!";
my %geneModelsID_lncRNA;
foreach ( keys %geneModelsID_lncRNA1 ) { $geneModelsID_lncRNA{$_} = $geneModelsID_lncRNA1{$_} }
foreach ( keys %geneModelsID_lncRNA2 ) { $geneModelsID_lncRNA{$_} = $geneModelsID_lncRNA2{$_} }
foreach my $gene_ID ( sort keys %geneModelsID_lncRNA ) {
    my $gene_header = $gene_info{$gene_ID}{"header"};
    $gene_header =~ s/\tgene\t/\tncRNA_gene\t/;
    $gene_header = &add_attr($gene_header, "Filtered_for_lncRNA=True");
    foreach ( sort keys %{$filtered_reason_of_gene{$gene_ID}} ) {
        $gene_header = &add_attr($gene_header, "Filtered_for_$_=True");
    }
    my $out = $gene_header;
    foreach my $mRNA_ID ( @{$gene_info{$gene_ID}{"mRNA_ID"}} ) {
        my $mRNA_header = $gene_info{$gene_ID}{"mRNA_header"}{$mRNA_ID};
        my $mRNA_info = $gene_info{$gene_ID}{"mRNA_info"}{$mRNA_ID};
        if ( exists $transcript_is_lncRNA{$mRNA_ID} ) {
            $mRNA_header =~ s/\tmRNA\t/\tlnc_RNA\t/;
            $mRNA_info =~ s/.*\tCDS.*\n//g;
        }
        foreach ( sort keys %{$filtered_reason_of_transcript{$mRNA_ID}} ) {
            my $added_attr = "$_=$filtered_reason_of_transcript{$mRNA_ID}{$_}";
            $mRNA_header = &add_attr($mRNA_header, $added_attr);
        }
        $out .= $mRNA_header;
        $out .= $mRNA_info;
    }
    print OUT "$out\n";
}
close OUT;

# 输出低质量被过滤的基因模型
open OUT, ">", "$out_prefix.lowQuality.gff3" or die "Can not create file $out_prefix.lowQuality.gff3, $!";
foreach my $gene_ID ( sort keys %geneModelsID_lowQuality ) {
    my $gene_header = $gene_info{$gene_ID}{"header"};
    foreach ( sort keys %{$filtered_reason_of_gene{$gene_ID}} ) {
        $gene_header = &add_attr($gene_header, "Filtered_for_$_=True");
    }
    my $out = $gene_header;
    foreach my $mRNA_ID ( @{$gene_info{$gene_ID}{"mRNA_ID"}} ) {
        my $mRNA_header = $gene_info{$gene_ID}{"mRNA_header"}{$mRNA_ID};
        my $mRNA_info = $gene_info{$gene_ID}{"mRNA_info"}{$mRNA_ID};
        foreach ( sort keys %{$filtered_reason_of_transcript{$mRNA_ID}} ) {
            my $added_attr = "$_=$filtered_reason_of_transcript{$mRNA_ID}{$_}";
            $mRNA_header = &add_attr($mRNA_header, $added_attr);
        }
        $out .= $mRNA_header;
        $out .= $mRNA_info;
    }
    print OUT "$out\n";
}
close OUT;

my $number1 = %geneModelsID_coding;
my $number2 = %geneModelsID_lncRNA1;
my $number3 = %geneModelsID_lncRNA2;
my $number4 = %geneModelsID_lowQuality;
my $number5 = $number2 + $number3;
my $total_number = %gene_info;
print STDERR "\n总共输入了 $total_number 个基因；
编码基因有 $number1 个，保存到了 $out_prefix.coding.gff3 文件中；
lncRNA基因有 $number5 个，保存到了 $out_prefix.lncRNA.gff3 文件中（同时因b-f五种原因过滤的有 $number2 个，所有转录本全是 lncRNA 的有 $number3  个）；
低质量基因有 $number4 个，保存到了 $out_prefix.lowQuality.gff3 文件中。\n";


unlink "GFF3_extract_TranscriptID_for_filtering.$$.gff3";

sub add_attr {
    my $mRNA_header = $_[0];
    my $add_attr = $_[1];
    chomp($mRNA_header);
    $mRNA_header =~ s/(.*)\t(.*)/$1/;
    my $attr = $2;
    $attr =~ s/;$//;

    my (%attr, %attr_sort, $sort_num);
    foreach ( split /;/, $attr ) {
        if (m/(.*)\=(.*)/) {
            $sort_num ++;
            $attr{$1} = $2;
            $attr_sort{$1} = $sort_num unless exists $attr_sort{$1};
        }
    }
    if ( $add_attr =~ m/(.*)\=(.*)/ ) {
        $sort_num ++;
        $attr{$1} = $2;
        $attr_sort{$1} = $sort_num unless exists $attr_sort{$1};
    }

    my @out;
    foreach ( sort { $attr_sort{$a} <=> $attr_sort{$b} } keys %attr ) {
        push @out, "$_=$attr{$_}";
    }
    my $out = join ";", @out;
    return "$mRNA_header\t$out\n";
}

# 子程序，返回基因的GFF3哈希信息：
# gene_ID => "header" => gene_header
# gene_ID => "mRNA_ID" => 数组
# gene_ID => "mRNA_header" => mRNA_ID => mRNA_header
# gene_ID => "mRNA_info" => mRNA_ID => mRNA_Info
sub get_geneModels_from_GFF3 {
    my %gene_info;
    # 第一轮，找gene信息
    open IN, $_[0] or die "Can not open file $_[0], $!";
    while (<IN>) {
        if ( m/\tgene\t.*ID=([^;\s]+)/ ) {
            $gene_info{$1}{"header"} = $_;
        }
    }
    close IN;
    # 第二轮，找Parent值是geneID的信息，包含但不限于 mRNA 信息
    my %mRNA_ID2gene_ID;
    open IN, $_[0] or die "Can not open file $_[0], $!";
    while (<IN>) {
        if ( m/Parent=([^;\s]+)/ ) {
            my $parent = $1;
            if ( exists $gene_info{$parent} ) {
                if ( m/ID=([^;\s]+)/ ) {
                    push @{$gene_info{$parent}{"mRNA_ID"}}, $1;
                    $gene_info{$parent}{"mRNA_header"}{$1} = $_;
                    $mRNA_ID2gene_ID{$1} = $parent;
                }
            }
        }
    }
    close IN;
    # 第三轮，找Parent值不是geneID的信息
    open IN, $_[0] or die "Can not open file $_[0], $!";
    while (<IN>) {
        if ( m/Parent=([^;\s]+)/ && exists $mRNA_ID2gene_ID{$1} ) {
            my $parent = $1;
            $gene_info{$mRNA_ID2gene_ID{$1}}{"mRNA_info"}{$parent} .= $_;
        }
    }
    close IN;

    return %gene_info;
}
