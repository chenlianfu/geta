#!/usr/bin/perl
use strict;
use Getopt::Long;

my $usage = <<USAGE;
Usage:
    perl $0 best_candidates.lowIdentity.gff3 genome.fasta species_name

    程序输入best_candidates.lowIdentity.gff3文件中包含完整且准确的基因模型（来源于转录本或同源蛋白的比对结果），且这些基因模型满足一些要求，例如：多CDS、CDS总长度较长、CDS长度占转录本序列比例较高、intron长度较短。这些基因模型适合用来做HMM准确性检测。

    --flanking_length <int>    default: auto_calculated_value
    该参数用于转换得到genebank格式基因模型时，在gene两端添加的侧翼序列长度。若不添加该参数，则程序根据best_candidates.lowIdentity.gff3文件得到gene长度，取其median值作为该参数的值。若添加该参数，则使用该参素指定的值。
    注意：对基因组基因比较稠密的物种，一定要手动设置该值。例如对真菌物种，推荐设置该值为100。

    --min_gene_number_for_augustus_training <int>    default: 500
    若用于augustus training的基因模型数量低于此数目的时候，程序直接使用所有的基因模型进行augustus training；再用这些基因模型进行准确性检测（该准确性检测结果是不可信的）。

    --gene_number_for_accuracy_detection <int>    default: 200
    若用于augustus training的基因模型数量超过上一个参数设定阈值时，进行Augustus traing，会将gene models随机分成两部分，第一部分包含该指定数目的基因，用于准确性检测（该准确性检测结果是可信的）；剩下的基因模型用于进行augustus training。

    --CPU <int>    default: 8
    程序调用optimize_augustus.pl命令时，会自动计算其--cpus参数的值，若该值超过本参数的值，则使用本参数的值。

    --min_gene_number_of_optimize_augustus_chunk <int>    default: 50
    --max_gene_number_of_optimize_augustus_chunk <int>    default: 200
    进行Augustus优化时，会将基因模型分成多份数据，每份数据包含 x 个基因模型，程序会自动计算该 x 值。按默认设置：首先，程序设定该值为50，从而计算出基因模型的份数(optimize_augustus.pl命令--cps参数的值)；若份数超过了--CPU设定的值，则基因模型将被分成--CPU指定的份数；每份数据包含的基因模型数量若超过了200，则强制使每份数据的基因模型数量为200。
    这两个参数要根据能用于AUGUSTUS training的基因模型个数和能利用的CPU线程数综合判断。

    --optimize_augustus_rounds <int>    default: 5
    进行Augustus优化时，对HMM参数进行5轮修正。

    --onlytrain_GFF3 <string>    default: None
    输入一个GFF3文件，该GFF3中的基因模型是全基因组中所有准确的基因模型，可以包含不完整的基因模型。该GFF3文件也包含输入文件best_candidates.lowIdentity.gff3中所有的基因模型。
    若使用该参数，则程序会使用该文件中的基因模型（best_candidates.lowIdentity.gff3文件得到的genes.gb中的基因模型除外）仅用作etraining。

    --allowStartCodonBesidesATG
    若设置该参数后，则允许CTG和TTG可以作为起始密码子。

    --stopAfterFirstEtraining
    在进行第一次etraining和准确性检测后，即终止程序运行。

USAGE
if (@ARGV==0){die $usage}

my ($flanking_length, $min_gene_number_for_augustus_training, $gene_number_for_accuracy_detection, $min_gene_number_of_optimize_augustus_chunk, $max_gene_number_of_optimize_augustus_chunk, $onlytrain_GFF3, $CPU, $allowStartCodonBesidesATG, $stopAfterFirstEtraining, $optimize_augustus_rounds);
GetOptions(
    "flanking_length:i" => \$flanking_length,
    "min_gene_number_for_augustus_training:i" => \$min_gene_number_for_augustus_training,
    "gene_number_for_accuracy_detection:i" => \$gene_number_for_accuracy_detection,
    "min_gene_number_of_optimize_augustus_chunk:i" => \$min_gene_number_of_optimize_augustus_chunk,
    "max_gene_number_of_optimize_augustus_chunk:i" => \$max_gene_number_of_optimize_augustus_chunk,
    "onlytrain_GFF3:s" => \$onlytrain_GFF3,
    "CPU:i" => \$CPU,
    "allowStartCodonBesidesATG!" => \$allowStartCodonBesidesATG,
    "stopAfterFirstEtraining!" => \$stopAfterFirstEtraining,
    "optimize_augustus_rounds:i" => \$optimize_augustus_rounds,
);
$min_gene_number_for_augustus_training ||= 500;
$gene_number_for_accuracy_detection ||= 200;
$min_gene_number_of_optimize_augustus_chunk ||= 50;
$max_gene_number_of_optimize_augustus_chunk ||= 200;
$CPU ||= 8;
$optimize_augustus_rounds ||= 5;

# 计算gene长度
open IN, $ARGV[0] or die $!;
my @gene_length;
while (<IN>) {
    push @gene_length, $2 - $1 + 1 if m/\tgene\t(\d+)\t(\d+)/;
}
@gene_length = sort {$a <=> $b} @gene_length;
$flanking_length = $gene_length[@gene_length/2] unless $flanking_length;
print STDERR "the median gene length is $gene_length[@gene_length/2], the flanking length was set to $flanking_length\n";

# 将GFF3转换成GeneBank格式
my $cmdString = "gff2gbSmallDNA.pl $ARGV[0] $ARGV[1] $flanking_length genes.raw.gb &> gff2gbSmallDNA.raw.log";
print STDERR "CMD: $cmdString\n";
(system $cmdString) == 0 or die "Failed to execute: $cmdString\n";

if ($onlytrain_GFF3) {
    $cmdString = "gff2gbSmallDNA.pl $onlytrain_GFF3 $ARGV[1] $flanking_length genes.all.gb &> gff2gbSmallDNA.all.log";
    print STDERR "CMD: $cmdString\n";
    (system $cmdString) == 0 or die "Failed to execute: $cmdString\n";
}

# 去除错误的基因模型
my $for_bad_genes_removing = `echo \$AUGUSTUS_CONFIG_PATH`;
chomp($for_bad_genes_removing);
$for_bad_genes_removing = "$for_bad_genes_removing/species/for_bad_genes_removing_$$";
if (-e $for_bad_genes_removing) {
    $cmdString = "rm -rf $for_bad_genes_removing";
    print STDERR "CMD: $cmdString\n";
    (system $cmdString) == 0 or die "Failed to execute: $cmdString\n";
}
$cmdString = "new_species.pl --species=for_bad_genes_removing_$$ &> new_species.1.log";
print STDERR "CMD: $cmdString\n";
(system $cmdString) == 0 or die "Failed to execute: $cmdString\n";
$cmdString = "etraining --species=for_bad_genes_removing_$$ --stopCodonExcludedFromCDS=false genes.raw.gb 1>etraining.out0 2> etraining.err0";
print STDERR "CMD: $cmdString\n";
(system $cmdString) == 0 or die "Failed to execute: $cmdString\n";
$cmdString = "rm -rf $for_bad_genes_removing";
print STDERR "CMD: $cmdString\n";
(system $cmdString) == 0 or die "Failed to execute: $cmdString\n";
$cmdString = "cat etraining.err0 | perl -pe 's/.*in sequence (\\S+): .*/\$1/' > badgenes.lst";
print STDERR "CMD: $cmdString\n";
(system $cmdString) == 0 or die "Failed to execute: $cmdString\n";
$cmdString = "filterGenes.pl badgenes.lst genes.raw.gb > genes.gb";
print STDERR "CMD: $cmdString\n";
(system $cmdString) == 0 or die "Failed to execute: $cmdString\n";

# 分析only_train的基因模型
open IN, "genes.gb" or die $!;
my ($gene_models_number, %gene_filter);
$/ = "//\n";
while (<IN>) {
    $gene_models_number ++ if m/^LOCUS/;
    $gene_filter{$1} = 1 if m/gene=\"(.*?)\"/;
}
close IN;
print STDERR "$gene_models_number gene models were prepared for Augustus Training\n";
open IN, "genes.all.gb";
open OUT, ">", "genes.only_train.gb" or die $!;
while (<IN>) {
    if (m/gene=\"(.*?)\"/ && ! exists $gene_filter{$1}) {
        print OUT;
    }
}
close IN;
close OUT;
$/ = "\n";

# 统计用于augustus training的基因数目
my $gene_number_for_training = $gene_models_number;
if ($gene_models_number >= $min_gene_number_for_augustus_training) {
    print STDERR "$gene_number_for_accuracy_detection gene models were randomly extracted for accuracy detection\n";
    $gene_number_for_training = $gene_models_number - $gene_number_for_accuracy_detection;
    print STDERR "$gene_number_for_training gene models were randomly extracted for augustus training\n";
    $cmdString = "randomSplit.pl genes.gb $gene_number_for_accuracy_detection";
    print STDERR "CMD: $cmdString\n";
    (system $cmdString) == 0 or die "Failed to execute: $cmdString\n";
}
else {
    print STDERR "All of the $gene_models_number gene models were used for accuracy detection\n";
    $cmdString = "ln -fs genes.gb genes.gb.test";
    print STDERR "CMD: $cmdString\n";
    (system $cmdString) == 0 or die "Failed to execute: $cmdString\n";
    print STDERR "All of the $gene_models_number gene models were used for augustus training\n";
    $cmdString = "ln -fs genes.gb genes.gb.train";
    print STDERR "CMD: $cmdString\n";
    (system $cmdString) == 0 or die "Failed to execute: $cmdString\n";
}

# 进行第一次augustus training
my $species_config_dir = `echo \$AUGUSTUS_CONFIG_PATH`;
chomp($species_config_dir);
$species_config_dir = "$species_config_dir/species/$ARGV[2]";
#$cmdString = "rm -rf $species_config_dir";
#print STDERR "CMD: $cmdString\n";
#(system $cmdString) == 0 or die "Failed to execute: $cmdString\n";
unless (-e $species_config_dir) {
    $cmdString = "new_species.pl --species=$ARGV[2] &> new_species.2.log";
    print STDERR "CMD: $cmdString\n";
    (system $cmdString) == 0 or die "Failed to execute: $cmdString\n";
}
$cmdString = "cat genes.only_train.gb genes.gb.train > genes.gb.etraining";
print STDERR "CMD: $cmdString\n";
(system $cmdString) == 0 or die "Failed to execute: $cmdString\n";
$cmdString = "etraining --species=$ARGV[2] genes.gb.etraining > etraining.out1 2> etraining.err1";
print STDERR "CMD: $cmdString\n";
(system $cmdString) == 0 or die "Failed to execute: $cmdString\n";

my ($frequency_tag, $frequency_taa, $frequency_tga);
open IN, "etraining.out1" or die $!;
while (<IN>) {
    $frequency_tag = $1 if m/^tag:.+\((.*)\)/;
    $frequency_taa = $1 if m/^taa:.+\((.*)\)/;
    $frequency_tga = $1 if m/^tga:.+\((.*)\)/;
}
print STDERR "the frequecy of three stop codons: TAG($frequency_tag), TAA($frequency_taa), TGA($frequency_tga)\n";
open IN, "$species_config_dir/$ARGV[2]_parameters.cfg" or die $!;
open OUT, ">", "$ARGV[2]_parameters.cfg" or die $!;
while (<IN>) {
    s#/(Constant/amberprob\s+)\S+#$1$frequency_tag#;
    s#/(Constant/ochreprob\s+)\S+#$1$frequency_taa#;
    s#/(Constant/opalprob\s+)\S+#$1$frequency_tga#;
    print OUT;
}
close IN;
close OUT;
$cmdString = "mv $ARGV[2]_parameters.cfg $species_config_dir/$ARGV[2]_parameters.cfg";
print STDERR "CMD: $cmdString\n";
(system $cmdString) == 0 or die "Failed to execute: $cmdString\n";
print STDERR "the parameters of the frequecy of three stop codons were changed in file $species_config_dir/$ARGV[2]_parameters.cfg\n";

# 进行第一次准确性检测
$cmdString = "augustus --species=$ARGV[2] genes.gb.test > firsttest.out";
unless (-e "firsttest.ok") {
    print STDERR "CMD: $cmdString\n";
    (system $cmdString) == 0 or die "Failed to execute: $cmdString\n";
    open OUT, ">", "firsttest.ok" or die $!; close OUT;

    # 备份hmm文件
    $cmdString = "cp -a $species_config_dir hmm_files_bak01";
    print STDERR "CMD: $cmdString\n";
    (system $cmdString) == 0 or die "Failed to execute: $cmdString\n";
}
else {
    print STDERR "CMD(Skipped): $cmdString\n";
}

if ($stopAfterFirstEtraining) {
    exit;
}

# 进行augustus training优化
my $chunk_num = $min_gene_number_of_optimize_augustus_chunk;
my $noly_train_gene_number = $gene_number_for_training % $chunk_num;
my $cpus = int ($gene_number_for_training / $chunk_num);
if ($cpus > $CPU) {
    $cpus = $CPU;
    $chunk_num = int($gene_number_for_training / $cpus);
    $chunk_num = $max_gene_number_of_optimize_augustus_chunk if $chunk_num > $max_gene_number_of_optimize_augustus_chunk;
    $noly_train_gene_number = $gene_number_for_training - $cpus * $chunk_num;
}
print STDERR "$cpus chunks (each have $chunk_num gene models) were used for augustus training optimization\n";
$cmdString = "randomSplit.pl genes.gb.train $noly_train_gene_number";
print STDERR "CMD: $cmdString\n";
(system $cmdString) == 0 or die "Failed to execute: $cmdString\n";
$cmdString = "cat genes.gb.train.test genes.only_train.gb > training.gb.onlytrain";
print STDERR "CMD: $cmdString\n";
(system $cmdString) == 0 or die "Failed to execute: $cmdString\n";
$cmdString = "optimize_augustus.pl --species=$ARGV[2] --rounds=$optimize_augustus_rounds --cpus=$cpus --kfold=$cpus --onlytrain=training.gb.onlytrain genes.gb.train.train > optimize.out";
unless (-e "optimize_augustus.ok") {
    print STDERR "CMD: $cmdString\n";
    (system $cmdString) == 0 or die "Failed to execute: $cmdString\n";
    open OUT, ">", "optimize_augustus.ok" or die $!; close OUT;
}
else {
    print STDERR "CMD(Skipped): $cmdString\n";
}

# 进行第二次augustus training
$cmdString = "etraining --species=$ARGV[2] genes.gb.etraining > etraining.out2 2> etraining.err2";
print STDERR "CMD: $cmdString\n";
(system $cmdString) == 0 or die "Failed to execute: $cmdString\n";

# 若optimize_augustus.pl运行后对parameters.cfg文件的/Constant/decomp_num_steps参数进行了修改，使其值不等于1，则还需要根据etraining的结果，对/Constant/gc_range_min和/Constant/gc_range_max参数进行修改。
my ($gc_range_min, $gc_range_max);
open IN, "etraining.out2" or die $!;
while (<IN>) {
    if (m#/Constant/gc_range_min to (\S*) and /Constant/gc_range_max to (\S+)#) {
        ($gc_range_min, $gc_range_max) = ($1, $2);
        last;
    }
}
close IN;
if ($gc_range_min && $gc_range_max) {
    print STDERR "Set /Constant/gc_range_min to $gc_range_min and Set /Constant/gc_range_max to $gc_range_max for file $species_config_dir/$ARGV[2]_parameters.cfg\n";
    open IN, "$species_config_dir/$ARGV[2]_parameters.cfg" or die $!;
    open OUT, ">", "$ARGV[2]_parameters.cfg" or die $!;
    while (<IN>) {
        s#(/Constant/gc_range_min\s+)\S+#$1$gc_range_min#;
        s#(/Constant/gc_range_max\s+)\S+#$1$gc_range_max#;
        print OUT;
    }
    close IN;
    close OUT; 
    $cmdString = "mv $ARGV[2]_parameters.cfg $species_config_dir/$ARGV[2]_parameters.cfg";
    (system $cmdString) == 0 or die "Failed to execute: $cmdString\n";
}

unless ($allowStartCodonBesidesATG) {
    open IN, "etraining.out2" or die "Cannot open file etraining.out2, $!\n";
    my $exon_probs_file_path;
    while (<IN>) {
        $exon_probs_file_path = $1 if m#to file (.*exon_probs.pbl)#;
    }
    close IN;
    open IN, $exon_probs_file_path or die "Can not open file $exon_probs_file_path, $!\n";
    my $exon_probs_info = join "", <IN>;
    close IN;
    $exon_probs_info =~ s/\[STARTCODONS\].*\[LENGTH\]/\[STARTCODONS\]\n# number of start codons:\n1\n# start codons and their probabilities\nATG\t1\n\n# Length distributions\n\[LENGTH\]/s;
    open OUT, ">", $exon_probs_file_path or die "Can not write to file $exon_probs_file_path, $!\n";
    print OUT $exon_probs_info;
    close OUT;
    print STDERR "Start Codon was set only allow ATG, and the file $exon_probs_file_path was modified!\n";
}

# 进行第二次准确性检测
$cmdString = "augustus --species=$ARGV[2] genes.gb.test > secondtest.out";
unless (-e "secondtest.ok") {
    print STDERR "CMD: $cmdString\n";
    (system $cmdString) == 0 or die "Failed to execute: $cmdString\n";
    open OUT, ">", "secondtest.ok" or die $!; close OUT;

    # 备份hmm文件
    $cmdString = "cp -a $species_config_dir hmm_files_bak02";
    print STDERR "CMD: $cmdString\n";
    (system $cmdString) == 0 or die "Failed to execute: $cmdString\n";
}
else {
    print STDERR "CMD(Skipped): $cmdString\n";
}

print STDERR "the Augustus training completed\n";

# 两次准确性结果比较
my $accuracy_value = 0;
open IN, "firsttest.out" or die "Can not open file firsttest.out, $!\n";
while (<IN>) {
    if (m/^nucleotide level/) {
        @_ = split /[\s\|]+/;
        $accuracy_value += ($_[-2] * 3 + $_[-1] * 2);
    }
    elsif (m/^exon level/) {
        @_ = split /[\s\|]+/;
        $accuracy_value += ($_[-2] * 4 + $_[-1] * 3);
    }
    elsif (m/^gene level/) {
        @_ = split /[\s\|]+/;
        $accuracy_value += ($_[-2] * 2 + $_[-1] * 1);
    }
}
close IN;
my $first_accuracy = $accuracy_value / 15;
my $accuracy_value = 0;
open IN, "secondtest.out" or die "Can not open file secondtest.out, $!\n";
while (<IN>) {
    if (m/^nucleotide level/) {
        @_ = split /[\s\|]+/;
        $accuracy_value += ($_[-2] * 3 + $_[-1] * 2);
    }
    elsif (m/^exon level/) {
        @_ = split /[\s\|]+/;
        $accuracy_value += ($_[-2] * 4 + $_[-1] * 3);
    }
    elsif (m/^gene level/) {
        @_ = split /[\s\|]+/;
        $accuracy_value += ($_[-2] * 2 + $_[-1] * 1);
    }
}
close IN;
my $second_accuracy = $accuracy_value / 15;
print STDERR "The first tested accuracy value of augustus training is: $first_accuracy\n";
print STDERR "The second tested accuracy value of augustus training is: $second_accuracy\n";
if ($second_accuracy < $first_accuracy) {
    print STDERR "The optimizing step could not increase the accuracy of augustus training! and the hmm files will be rolled back!\n";
    $cmdString = "rm -rf $species_config_dir && cp -a hmm_files_bak01 $species_config_dir && ln -sf -T hmm_files_bak01 hmm_files_bak";
    print STDERR "CMD: $cmdString\n";
    (system $cmdString) == 0 or die "Failed to execute: $cmdString\n";
}
else {
    $cmdString = "ln -sf -T hmm_files_bak02 hmm_files_bak";
    print STDERR "CMD: $cmdString\n";
    (system $cmdString) == 0 or die "Failed to execute: $cmdString\n";
}
