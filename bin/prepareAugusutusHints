#!/usr/bin/perl
use strict;
use Getopt::Long;

my $usage = <<USAGE;
Usage:
    perl $0 intron.txt transfrag.genome.gff3 genewise.gff3 genewise.start_stop_hints.gff > hints.gff

    程序用于生成augustus hints文件：（1）利用intron.txt文件信息生成类型为W的intron hints信息；（2）使用transfrag.genome.gff3文件信息生成类型为E的exonpart hints信息；（3）使用genewis.gff3文件生成类型为P的CDSpart和intron hints信息; （4）根据transfrag.genome.gff3文件中的Form和Integrity信息提取start和stop信息。

    --margin <int>    default: 20
    由基因模型的exon或cds信息得到exonpart或CDSpart hints信息：若exon或cds的长度超过80bp时，则exonpart或cdspart则是首尾各去除20bp后的区间；否则，exonpart或cdspart是中间一半的区间（首尾各去除四分之一）。

USAGE
if (@ARGV==0){die $usage}

my ($margin);
GetOptions(
    "margin:s" => \$margin,
);
$margin ||= 20;

my %hints;
open IN, $ARGV[0] or die "Can not open the file $ARGV[0], $!\n";
while (<IN>) {
    chomp;
	@_ = split /\t/;
	$hints{"$_[1]\t\.\tintron\t$_[3]\t$_[4]\t$_[5]\t$_[2]\t\.\tmult=$_[5];pri=4;src=W"} = 1;
}
close IN;

open IN, $ARGV[1] or die "Can not open the file $ARGV[1], $!\n";
my ($gene_id, %cds, %strand, %chr, @gene_id, %integrity, %form);
while (<IN>) {
    if (m/\tgene\t.*ID=([^;]+)/) {
        $gene_id = $1;
        push @gene_id, $gene_id;
        $integrity{$gene_id} = $1 if m/Integrity=([^;\s]+)/;
        $form{$gene_id} = $1 if m/Form=([^;\s]+)/;
    }
    elsif (m/\texon\t/) {
        @_ = split /\t/;

        my $margin_value = $margin;
        my $length = $_[4] - $_[3] + 1;
        if ($length < 80) {
            $margin_value = int($length / 2);
        }

        if ($margin_value > 1) {
            my $start = $_[3] + $margin_value;
            my $end = $_[4] - $margin_value;
            $hints{"$_[0]\t\.\texonpart\t$start\t$end\t\.\t$_[6]\t\.\tgrp=$gene_id;pri=4;src=E"} = 1;
        }
    }
    elsif (m/\tCDS\t/) {
        @_ = split /\t/;
        $cds{$gene_id}{"$_[3]\t$_[4]"} = 1;
        $strand{$gene_id} = $_[6];
        $chr{$gene_id} = $_[0];
    }
}
close IN;

foreach my $id (@gene_id) {
    my @cds = sort {$a <=> $b} keys %{$cds{$id}};
    my $strand = $strand{$id};
    my $chr = $chr{$id};
    my $integrity = $integrity{$id};
    my $form = $form{$id};

    if ($form eq "one_transcript_get_1_gene_model_num1") {
        if ($integrity eq "complete") {
            if ($strand eq "+") {
                my ($ss1, $ss2) = split /\t/, $cds[0];
                if ($ss2 - $ss1 >= 2) {
                    my $ss3 = $ss1 + 2;
                    $hints{"$chr\t\.\tstart\t$ss1\t$ss3\t\.\t$strand\t0\tgrp=$id;pri=4;src=E"} = 1;
                }
                ($ss1, $ss2) = split /\t/, $cds[-1];
                if ($ss2 - $ss1 >= 2) {
                    my $ss3 = $ss2 - 2;
                    $hints{"$chr\t\.\tstop\t$ss3\t$ss2\t\.\t$strand\t0\tgrp=$id;pri=4;src=E"} = 1;
                }
            }
            elsif ($strand eq "-") {
                my ($ss1, $ss2) = split /\t/, $cds[-1];
                if ($ss2 - $ss1 >= 2) {
                    my $ss3 = $ss2 - 2;
                    $hints{"$chr\t\.\tstart\t$ss3\t$ss2\t\.\t$strand\t0\tgrp=$id;pri=4;src=E"} = 1;
                }
                ($ss1, $ss2) = split /\t/, $cds[0];
                if ($ss2 - $ss1 >= 2) {
                    my $ss3 = $ss1 + 2;
                    $hints{"$chr\t\.\tstop\t$ss1\t$ss3\t\.\t$strand\t0\tgrp=$id;pri=4;src=E"} = 1;
                }
            }
        }
        elsif ($integrity eq "5prime_partial") {
            if ($strand eq "+") {
                my ($ss1, $ss2) = split /\t/, $cds[-1];
                if ($ss2 - $ss1 >= 2) {
                    my $ss3 = $ss2 - 2;
                    $hints{"$chr\t\.\tstop\t$ss3\t$ss2\t\.\t$strand\t0\tgrp=$id;pri=4;src=E"} = 1;
                }
            }
            elsif ($strand eq "-") {
                my ($ss1, $ss2) = split /\t/, $cds[0];
                if ($ss2 - $ss1 >= 2) {
                    my $ss3 = $ss1 + 2;
                    $hints{"$chr\t\.\tstop\t$ss1\t$ss3\t\.\t$strand\t0\tgrp=$id;pri=4;src=E"} = 1;
                }
            }
        }
        elsif ($integrity eq "3prime_partial") {
            if ($strand eq "+") {
                my ($ss1, $ss2) = split /\t/, $cds[0];
                if ($ss2 - $ss1 >= 2) {
                    my $ss3 = $ss1 + 2;
                    $hints{"$chr\t\.\tstart\t$ss1\t$ss3\t\.\t$strand\t0\tgrp=$id;pri=4;src=E"} = 1;
                }
            }
            elsif ($strand eq "-") {
                my ($ss1, $ss2) = split /\t/, $cds[-1];
                if ($ss2 - $ss1 >= 2) {
                    my $ss3 = $ss2 - 2;
                    $hints{"$chr\t\.\tstart\t$ss3\t$ss2\t\.\t$strand\t0\tgrp=$id;pri=4;src=E"} = 1;
                }
            }
        }
    }    
}

open IN, $ARGV[2] or die "Can not open the file $ARGV[2], $!\n";
my %genewise_CDSs_for_gene;
while (<IN>) {
    if (m/\tgene\t.*ID=([^;]+)/) {
        $gene_id = $1;
    }
    elsif (m/\tCDS\t/) {
        @_ = split /\t/;
        $genewise_CDSs_for_gene{$gene_id}{"$_[3]\t$_[4]\t$_[0]\t$_[6]"} = 1;

        my $margin_value = $margin;
        my $length = $_[4] - $_[3] + 1;
        if ($length < 80) { 
            $margin_value = int($length / 2);
        }

        if ($margin_value > 1) {
            my $start = $_[3] + $margin_value;
            my $end = $_[4] - $margin_value;
            $hints{"$_[0]\t\.\tCDSpart\t$start\t$end\t\.\t$_[6]\t\.\tgrp=$gene_id;pri=4;src=P"} = 1;
        }
    }
}
close IN;

open IN, $ARGV[3] or die "Can not open the file $ARGV[3], $!\n";
while (<IN>) {
    chomp;
    $hints{$_} = 1;
}
close IN;

foreach my $gene (keys %genewise_CDSs_for_gene) {
    my @exon = sort {$a <=> $b} keys %{$genewise_CDSs_for_gene{$gene}};
    if (@exon >= 2) {
        @_ = split /\t/, $exon[0];
        my @intron = &get_intron_by_exon(\@exon);
        foreach (@intron) {
            $hints{"$_[2]\t\.\tintron\t$_\t\.\t$_[3]\t\.\tgrp=$gene;pri=4;src=P"} = 1;
        }
    }
}

my (%sort1, %sort2, %sort3, %sort4);
foreach (keys %hints) {
    @_ = split /\t/;
    $sort1{$_} = $_[0];
    $sort2{$_} = $_[3];
    $sort3{$_} = $_[4];
    $sort4{$_} = $_[6];
}

foreach (sort { $sort1{$a} cmp $sort1{$b} or $sort2{$a} <=> $sort2{$b} or $sort3{$a} <=> $sort3{$b} or $sort4{$a} cmp $sort4{$b} } keys %hints) {
    print "$_\n";
}

sub get_intron_by_exon {
   my @exon = @{$_[0]};
   @_ = split /\t/, shift @exon;
   my $intron_start = $_[1] + 1;

   my @out;
   while (@exon) {
      @_ = split /\t/, shift @exon;
      my $intron_end = $_[0] - 1;
      push @out, "$intron_start\t$intron_end";
      $intron_start = $_[1] + 1;
   }

   return @out;
}
