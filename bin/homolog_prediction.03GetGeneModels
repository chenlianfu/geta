#!/usr/bin/env perl

use strict;
use Getopt::Long;
use Cwd qw/abs_path getcwd cwd/;
use File::Basename;

my $binPath = dirname($0);

my $usage = <<USAGE;
Usage:
    $0 [options] genome.fasta out.geneModels.tab > out.geneModels.gff3

    本程序根据同源蛋白的基因模型预测结果，对一个基因区域，选择最优的基因模型，输出GFF3信息，并将基因模型分为四类：
        （A）对同源蛋白覆盖100%，且起始密码子和终止密码子和同源蛋白匹配一致；excellent gene models
        （B）对同源蛋白覆盖不小于80%且强制补齐后完整基因模型长度不小于同源蛋白序列长度的80%；good gene models
        （C）对同源蛋白覆盖不小于40%且强制补齐的完整基因模型长度不小于同源蛋白序列长度的40%；fair gene models
        （D）对同源蛋白覆盖小于40%、或强制补齐的完整基因模型长度小于同源蛋白序列长度的40%、或不能强制补齐的基因模型。poor gene models
    本程序在临时文件夹下生成文件final_all.gff3，包含所有的基因模型。在标准输出中输出最终结果，可以选择不输出第三类或第四类基因模型。

    输入文件out.geneModels.tab包含15列数据：(1) 目标基因组序列名称；(2) 预测软件名称；(3) 基因起始位点；(4) 基因结束位点；(5) introns信息，多个introns之间使用分号分割，每个intron前后坐标使用中划线分割；(6) 基因所在的正负链；(7) 同源蛋白名称；(8) 同源蛋白其长度；(9) 同源蛋白匹配的起始位点；(10) 同源蛋白匹配的结束位点；(11) CDS总长度；(12) CDS内部的终止密码子数量；(13) Diamond BLASTX比对的Evalue值；(14) Diamond BLASTX比对的Score值；(15) Diamond BLASTX比对的Identity。

    --threshold_homolog_coverage_good <float>    default: 0.8
    --threshold_homolog_coverage_fair <float>    default: 0.4
    设置对同源蛋白覆盖度阈值。若基因模型对同源蛋白的覆盖率不低于--threshold_homolog_coverage_good，则评估为good gene models；若基因模型对同源蛋白的覆盖率不低于--threshold_homolog_coverage_fair，则评估成fair gene models。

    --genetic_code <int>    default: 1
    设置遗传密码。该参数对应的值请参考NCBI Genetic Codes: https://www.ncbi.nlm.nih.gov/Taxonomy/Utils/wprintgc.cgi。用于设置对基因模型强制补齐时的起始密码子和终止密码子。

    --tmp_dir <string>    default: tmp_\$date\$pid
    程序运行时临时文件夹名称。

    --no_fair_gene_models    default: None
    添加该参数后，程序不在标准输出中给出第三类fair gene models。在临时文件目录下的final_all.gff3文件中依然保留所有四种类型的基因模型。

    --no_poor_gene_models    default: None
    添加该参数后，程序不在标准输出中给出第四类poor gene models。在临时文件目录下的final_all.gff3文件中依然保留所有四种类型的基因模型。

    --out_alignment_GFF3 <string>    default: None
    让程序输出一个GFF3格式的同源蛋白比对文件，包含同源蛋白对基因组序列的比对信息。一个基因区域输出每个同源蛋白的最优比对信息。

    --max_alignment_num_for_each_gene_region <int>    default: 5
    当输出GFF3格式同源蛋白比对文件时，每个基因区域最多输出5个同源蛋白的结果。

    --help    default: None
    display this help and exit.

    本程序的运行需要调用其同目录下的fillingEndsOfGeneModels和GFF3Clear指令。

USAGE
if (@ARGV==0){die $usage}

my ($help_flag, $threshold_homolog_coverage_good, $threshold_homolog_coverage_fair, $tmp_dir, $genetic_code, $no_fair_gene_models, $no_poor_gene_models, $out_alignment_GFF3, $out_alignment_num_for_each_gene_region);
GetOptions(
    "help" => \$help_flag,
    "threshold_homolog_coverage_good:f" => \$threshold_homolog_coverage_good,
    "threshold_homolog_coverage_fair:f" => \$threshold_homolog_coverage_fair,
    "tmp_dir:s" => \$tmp_dir,
    "genetic_code:i" => \$genetic_code,
    "no_fair_gene_models" => \$no_fair_gene_models,
    "no_poor_gene_models" => \$no_poor_gene_models,
    "out_alignment_GFF3:s" => \$out_alignment_GFF3,
    "out_alignment_num_for_each_gene_region:i" => \$out_alignment_num_for_each_gene_region,
);
$threshold_homolog_coverage_good ||= 0.8;
$threshold_homolog_coverage_fair ||= 0.4;
$genetic_code ||= 1;
my $date = `date +%Y%m%d%H%M%S`; chomp($date);
$tmp_dir ||= "tmp_$date$$";
$tmp_dir = abs_path($tmp_dir);
mkdir $tmp_dir unless -e $tmp_dir;

if ( $help_flag ) { die $usage }

my $input_file1 = abs_path($ARGV[0]);
my $input_file2 = abs_path($ARGV[1]);
$out_alignment_GFF3 = abs_path($out_alignment_GFF3) if $out_alignment_GFF3;
$out_alignment_num_for_each_gene_region ||= 5;

# 读取基因组序列信息
open IN, $input_file1 or die "Can not open file $input_file1, $!";
my (%genome_seq, $id);
while (<IN>) {
    chomp;
    if (/>(\S+)/) { $id = $1; }
    else { $genome_seq{$id} .= uc($_); }
}
close IN;

# 生成同源蛋白比对GFF3文件
if ( $out_alignment_GFF3 ) {
    open OUT, ">", $out_alignment_GFF3 or die "Can not create file $out_alignment_GFF3, $!";
    open IN, $input_file2 or die "Can not open file $input_file2, $!";
    <IN>;
    $/ = "\n\n";
    while (<IN>) {
        s/(.*):\n//;
        my @geneModels = split /\n/, $_;
        my %geneModels;
        my $out_num = 0;
        foreach my $geneModels ( @geneModels ) {
            @_ = split /\t/, $geneModels;
            next if exists $geneModels{$_[6]};
            $geneModels{$_[6]} = 1;
            print OUT &gff3_alignment(@_);
            $out_num ++;
            last if $out_num >= $out_alignment_num_for_each_gene_region;
        }
    }
    $/ = "\n";
    close IN;
    close OUT;
}

# 分析基因模型数据
open IN, $input_file2 or die "Can not open file $input_file2, $!";
open OUTA, ">", "$tmp_dir/A_raw.gff3" or die "Can not create file $tmp_dir/A_raw.gff3, $!";
open OUTB, ">", "$tmp_dir/B_raw.gff3" or die "Can not create file $tmp_dir/B_raw.gff3, $!";
open OUTC, ">", "$tmp_dir/C_raw.gff3" or die "Can not create file $tmp_dir/C_raw.gff3, $!";
open OUTD, ">", "$tmp_dir/D_raw.gff3" or die "Can not create file $tmp_dir/D_raw.gff3, $!";
<IN>;
# 每个基因区域以两个换行符分割
$/ = "\n\n";
my @geneID;
my ($numA, $numB, $numC, $numD);
my $gene_num = 0;
while (<IN>) {
    my $gene_region = $1 if s/(.*):\n//;
    s/\n*$//;
    my @geneModels = split /\n/, $_;
    if ( @geneModels ) {
        $gene_num ++; push @geneID, "gene$gene_num";
        # 得到目标基因区域最优的基因模型
        my $best_geneModels = shift @geneModels;
        # 分析其它基因模型中的intron信息，用于标记最终GFF3文件中intron的证据数量。
        my %intron_support_num;
        foreach ( @geneModels ) {
            @_ = split /\t/, $_;
            foreach ( split /;/, $_[4] ) {
                if ( m/(\d+)-(\d+)/ ) {
                    if ( $1 > $2 ) {
                        $intron_support_num{"$2\t$1"} ++;
                    }
                    else {
                        $intron_support_num{"$1\t$2"} ++;
                    }
                }
            }
        }
        @_ = split /\t/, $best_geneModels;
        my $coverage = 0;
        $coverage = (abs($_[9] - $_[8]) + 1) / $_[7] if $_[7];
        # 根据对homolog的覆盖率对基因模型进行分类
        if ( $coverage == 1 && $_[11] == 0 ) {
            my $gff3_out = &get_gff3(\@_, "excellent_gene_models_predicted_by_homolog", "gene$gene_num", \%intron_support_num);
            print OUTA "$gff3_out\n"; $numA ++;
        }
        elsif ( $coverage >= $threshold_homolog_coverage_good ) {
            my $gff3_out = &get_gff3(\@_, "good_gene_models_predicted_by_homolog", "gene$gene_num", \%intron_support_num);
            print OUTB "$gff3_out\n"; $numB ++;
        }
        elsif ( $coverage >= $threshold_homolog_coverage_fair ) {
            my $gff3_out = &get_gff3(\@_, "fair_gene_models_predicted_by_homolog", "gene$gene_num", \%intron_support_num);
            print OUTC "$gff3_out\n"; $numC ++;
        }
        else {
            my $gff3_out = &get_gff3(\@_, "poor_gene_models_predicted_by_homolog", "gene$gene_num", \%intron_support_num);
            print OUTD "$gff3_out\n"; $numD ++;
        }
    }
}
close IN;
$/ = "\n";
close OUTA; close OUTB; close OUTC; close OUTD;
print STDERR "第一轮生成基因模型并分类：A 类 $numA 个、B 类 $numB 个、C 类 $numC 个、D 类 $numD 个。\n";

@_ = &codon_table("$tmp_dir/codon.table");
my (%start_codon, %stop_codon, $start_codon, $stop_codon);
%start_codon = %{$_[1]};
%stop_codon = %{$_[2]};
$start_codon = join ",", sort keys %start_codon;
$stop_codon = join ",", sort keys %stop_codon;

# 调用fillingEndsOfGeneModels命令对基因模型进行强行补充完整。
my $cmdString = "$binPath/fillingEndsOfGeneModels --nonCompletedGeneModels $tmp_dir/A_NF.gff3 --start_codon $start_codon --stop_codon $stop_codon $input_file1 $tmp_dir/A_raw.gff3 > $tmp_dir/A_FE.gff3 2> $tmp_dir/fillingEndsOfGeneModels.A.log";
print STDERR (localtime) . ": CMD: $cmdString\n";
system("$cmdString") == 0 or die "failed to execute: $cmdString\n";
my $cmdString = "$binPath/fillingEndsOfGeneModels --nonCompletedGeneModels $tmp_dir/B_NF.gff3 --start_codon $start_codon --stop_codon $stop_codon $input_file1 $tmp_dir/B_raw.gff3 > $tmp_dir/B_FE.gff3 2> $tmp_dir/fillingEndsOfGeneModels.B.log";
print STDERR (localtime) . ": CMD: $cmdString\n";
system("$cmdString") == 0 or die "failed to execute: $cmdString\n";
my $cmdString = "$binPath/fillingEndsOfGeneModels --nonCompletedGeneModels $tmp_dir/C_NF.gff3 --start_codon $start_codon --stop_codon $stop_codon $input_file1 $tmp_dir/C_raw.gff3 > $tmp_dir/C_FE.gff3 2> $tmp_dir/fillingEndsOfGeneModels.C.log";
print STDERR (localtime) . ": CMD: $cmdString\n";
system("$cmdString") == 0 or die "failed to execute: $cmdString\n";
my $cmdString = "$binPath/fillingEndsOfGeneModels --nonCompletedGeneModels $tmp_dir/D_NF.gff3 --start_codon $start_codon --stop_codon $stop_codon $input_file1 $tmp_dir/D_raw.gff3 > $tmp_dir/D_FE.gff3 2> $tmp_dir/fillingEndsOfGeneModels.D.log";
print STDERR (localtime) . ": CMD: $cmdString\n";
system("$cmdString") == 0 or die "failed to execute: $cmdString\n";

# 对四个级别的基因模型进一步分选。
my (%classA, %classB, %classC, %classD);
# 对A类基因模型进一步筛选：完整不需要补齐的不变；进行过补齐的则检测其protein长度 / homolog长度的比值，降级为B、C或D类型；无法补齐的降级为D类。
$/ = "\n\n";
open IN, "$tmp_dir/A_FE.gff3" or die "Can not open file $tmp_dir/A_FE.gff3, $!";
my ($num1, $num2, $num3, $num4, $num5, $num6, $num7) = (0, 0, 0, 0, 0, 0, 0);
while (<IN>) {
    $num1 ++;
    my $gene_ID = $1 if m/ID=([^;]+)/;
    if ( m/Filling2Complete/ ) {
        $num2 ++;
        my $protein_length_ratio = 0;
        $protein_length_ratio = &cal_protein_length_ratio($_);
        if ( $protein_length_ratio >= $threshold_homolog_coverage_good ) {
            s/excellent_gene_models_predicted_by_homolog/good_gene_models_predicted_by_homolog/g;
            $classB{$gene_ID} = $_;
            $num4 ++;
        }
        elsif ( $protein_length_ratio >= $threshold_homolog_coverage_fair ) {
            s/excellent_gene_models_predicted_by_homolog/fair_gene_models_predicted_by_homolog/g;
            $classC{$gene_ID} = $_;
            $num5 ++;
        }
        else {
            s/excellent_gene_models_predicted_by_homolog/poor_gene_models_predicted_by_homolog/g;
            $classD{$gene_ID} = $_;
            $num6 ++;
        }
    }
    else {
        $num3 ++;
        $classA{$gene_ID} = $_;
    }
}
close IN;
open IN, "$tmp_dir/A_NF.gff3" or die "Can not open file $tmp_dir/A_NF.gff3, $!";
while (<IN>) {
    $num1 ++;
    $num6 ++;
    $num7 ++;
    my $gene_ID = $1 if m/ID=([^;]+)/;
    s/excellent_gene_models_predicted_by_homolog/poor_gene_models_predicted_by_homolog/g;
    $classD{$gene_ID} = $_;
}
close IN;
print STDERR "对同源蛋白覆盖度为100%的基因模型有 $num1 个，其中完整的基因模型有 $num3 个，能填补完整的基因模型有 $num2 个，不能填补完整的基因模型有 $num7 个。\n";
print STDERR "对同源蛋白覆盖度为100%的基因模型有 $num1 个，属于A类(excellent)的基因模型有 $num3 个，属于B类(good)的基因模型有 $num4 个，属于C类(fair)的基因模型有 $num5 个，属于D类(poor)的基因模型有 $num6 个。\n";

# 对B类基因模型进一步筛选：完整不需要补齐的继续为B1类；进行过补齐的则检测其protein长度 / homolog长度的比值，分级到B2、C或D类型；无法补齐的降级为D类。
open IN, "$tmp_dir/B_FE.gff3" or die "Can not open file $tmp_dir/B_FE.gff3, $!";
my ($num1, $num2, $num3, $num4, $num5, $num6, $num7) = (0, 0, 0, 0, 0, 0, 0);
while (<IN>) {
    $num1 ++;
    my $gene_ID = $1 if m/ID=([^;]+)/;
    if ( m/Filling2Complete/ ) {
        $num2 ++;
        my $protein_length_ratio = 0;
        $protein_length_ratio = &cal_protein_length_ratio($_);
        if ( $protein_length_ratio >= $threshold_homolog_coverage_good ) {
            $classB{$gene_ID} = $_;
            $num4 ++;
        }
        elsif ( $protein_length_ratio >= $threshold_homolog_coverage_fair ) {
            s/good_gene_models_predicted_by_homolog/fair_gene_models_predicted_by_homolog/g;
            $classC{$gene_ID} = $_;
            $num5 ++;
        }
        else {
            s/good_gene_models_predicted_by_homolog/poor_gene_models_predicted_by_homolog/g;
            $classD{$gene_ID} = $_;
            $num6 ++;
        }
    }
    else {
        $num3 ++;
        $classB{$gene_ID} = $_;
    }
}
close IN;
open IN, "$tmp_dir/B_NF.gff3" or die "Can not open file $tmp_dir/B_NF.gff3, $!";
while (<IN>) {
    $num1 ++;
    $num6 ++;
    $num7 ++;
    my $gene_ID = $1 if m/ID=([^;]+)/;
    s/good_gene_models_predicted_by_homolog/poor_gene_models_predicted_by_homolog/g;
    $classD{$gene_ID} = $_;
}
close IN;
my $min_cov = int($threshold_homolog_coverage_fair * 10000 + 0.5) / 100;
my $max_cov = int($threshold_homolog_coverage_good * 10000 + 0.5) / 100;
print STDERR "对同源蛋白覆盖度[$min_cov%, $max_cov%)的基因模型有 $num1 个，其中完整的基因模型有 $num3 个，能填补完整的基因模型有 $num2 个，不能填补完整的基因模型有 $num7 个。\n";
print STDERR "对同源蛋白覆盖度[$min_cov%, $max_cov%)的基因模型有 $num1 个，属于B1类(good, 直接预测完整)的基因模型有 $num3 个，属于B2类(good, 预测后能补齐完整)的基因模型有 $num4 个，属于C类(fair)的基因模型有 $num5 个，属于D类(poor)的基因模型有 $num6 个。\n";

# 对C类基因模型进一步筛选：完整不需要补齐的继续为C1类；进行过补齐的则检测其protein长度 / homolog长度的比值，分级到C2或D类型；无法补齐的降级为D类。
open IN, "$tmp_dir/C_FE.gff3" or die "Can not open file $tmp_dir/C_FE.gff3, $!";
my ($num1, $num2, $num3, $num4, $num5, $num6, $num7) = (0, 0, 0, 0, 0, 0, 0);
while (<IN>) {
    $num1 ++;
    my $gene_ID = $1 if m/ID=([^;]+)/;
    if ( m/Filling2Complete/ ) {
        $num2 ++;
        my $protein_length_ratio = 0;
        $protein_length_ratio = &cal_protein_length_ratio($_);
        if ( $protein_length_ratio >= $threshold_homolog_coverage_fair ) {
            $classC{$gene_ID} = $_;
            $num5 ++;
        }
        else {
            s/fair_gene_models_predicted_by_homolog/poor_gene_models_predicted_by_homolog/g;
            $classD{$gene_ID} = $_;
            $num6 ++;
        }
    }
    else {
        $num3 ++;
        $classC{$gene_ID} = $_;
    }
}
close IN;
open IN, "$tmp_dir/C_NF.gff3" or die "Can not open file $tmp_dir/C_NF.gff3, $!";
while (<IN>) {
    $num1 ++;
    $num6 ++;
    $num7 ++;
    my $gene_ID = $1 if m/ID=([^;]+)/;
    s/fair_gene_models_predicted_by_homolog/poor_gene_models_predicted_by_homolog/g;
    $classD{$gene_ID} = $_;
}
close IN;
my $min_cov = int($threshold_homolog_coverage_fair * 10000 + 0.5) / 100;
my $max_cov = int($threshold_homolog_coverage_good * 10000 + 0.5) / 100;
print STDERR "对同源蛋白覆盖度[$min_cov%, $max_cov%)的基因模型有 $num1 个，其中完整的基因模型有 $num3 个，能填补完整的基因模型有 $num2 个，不能填补完整的基因模型有 $num7 个。\n";
print STDERR "对同源蛋白覆盖度[$min_cov%, $max_cov%)的基因模型有 $num1 个，属于C1类(fair, 直接预测完整)的基因模型有 $num3 个，属于C2类(fair, 预测后能补齐完整)的基因模型有 $num5 个，属于D类(poor)的基因模型有 $num6 个。\n";

# 对D类基因模型进一步筛选：完整不需要补齐的继续为D1类；进行过补齐的继续为D2类；无法补齐的继续为D3类。
open IN, "$tmp_dir/D_FE.gff3" or die "Can not open file $tmp_dir/D_FE.gff3, $!";
my ($num1, $num2, $num3, $num4, $num5, $num6, $num7) = (0, 0, 0, 0, 0, 0, 0);
while (<IN>) {
    $num1 ++;
    $num6 ++;
    my $gene_ID = $1 if m/ID=([^;]+)/;
    if ( m/Filling2Complete/ ) {
        $num2 ++;
    }
    else {
        $num3 ++;
    }
    $classD{$gene_ID} = $_;
}
close IN;
open IN, "$tmp_dir/D_NF.gff3" or die "Can not open file $tmp_dir/D_NF.gff3, $!";
while (<IN>) {
    $num1 ++;
    $num6 ++;
    $num7 ++;
    my $gene_ID = $1 if m/ID=([^;]+)/;
    $classD{$gene_ID} = $_;
}
close IN;
my $max_cov = int($threshold_homolog_coverage_fair * 10000 + 0.5) / 100;
print STDERR "对同源蛋白覆盖度低于$max_cov%的基因模型有 $num1 个，其中完整的基因模型有 $num3 个，能填补完整的基因模型有 $num2 个，不能填补完整的基因模型有 $num7 个。\n";
print STDERR "对同源蛋白覆盖度低于$max_cov%的基因模型有 $num1 个，属于D1类(poor, 直接预测完整)的基因模型有 $num3 个，属于D2类(poor，预测后能补齐完整)的基因模型有 $num2 个，属于D3类(poor，无法补齐)的基因模型有 $num6 个。\n";
$/ = "\n";

# 输出 A B C D 四类基因模型
open OUTA, ">", "$tmp_dir/A_out.gff3" or die "Can not create file $tmp_dir/A_out.gff3, $!";
open OUTB, ">", "$tmp_dir/B_out.gff3" or die "Can not create file $tmp_dir/B_out.gff3, $!";
open OUTC, ">", "$tmp_dir/C_out.gff3" or die "Can not create file $tmp_dir/C_out.gff3, $!";
open OUTD, ">", "$tmp_dir/D_out.gff3" or die "Can not create file $tmp_dir/D_out.gff3, $!";
foreach ( @geneID ) {
    if ( exists $classA{$_} ) {
        print OUTA $classA{$_};
    }
    elsif ( exists $classB{$_} ) {
        print OUTB $classB{$_};
    }
    elsif ( exists $classC{$_} ) {
        print OUTC $classC{$_};
    }
    elsif ( exists $classD{$_} ) {
        print OUTD $classD{$_};
    }
}
close OUTA; close OUTB; close OUTC; close OUTD;
my ($numA, $numB, $numC, $numD) = (0, 0, 0, 0);
$numA = %classA; $numB = %classB; $numC = %classC; $numD = %classD; 
print STDERR "第二轮补齐基因模型后分类：A 类 $numA 个、B 类 $numB 个、C 类 $numC 个、D 类 $numD 个。\n";

# 合并四类基因模型结果，并去冗余
$cmdString = "$binPath/GFF3Clear --genome $input_file1 --no_attr_add $tmp_dir/A_out.gff3 $tmp_dir/B_out.gff3 $tmp_dir/C_out.gff3 $tmp_dir/D_out.gff3 > $tmp_dir/final_all.gff3 2> $tmp_dir/GFF3Clear.log";
print STDERR (localtime) . ": CMD: $cmdString\n";
system("$cmdString") == 0 or die "failed to execute: $cmdString\n";

my ($numA, $numB, $numC, $numD) = (0, 0, 0, 0);
open IN, "$tmp_dir/final_all.gff3" or die "Can not open file $tmp_dir/final_all.gff3, $!";
$/ = "\n\n";
while (<IN>) {
    $numA ++ if m/Type=excellent_gene_models_predicted_by_homolog/;
    $numB ++ if m/Type=good_gene_models_predicted_by_homolog/;
    $numC ++ if m/Type=fair_gene_models_predicted_by_homolog/;
    $numD ++ if m/Type=poor_gene_models_predicted_by_homolog/;
    next if ($no_fair_gene_models && m/Type=fair_gene_models_predicted_by_homolog/);
    next if ($no_poor_gene_models && m/Type=poor_gene_models_predicted_by_homolog/);
    print;
}
close IN;
$/ = "\n";
my $num_total = 0; $num_total = $numA + $numB + $numC + $numD;
print STDERR "第三轮整合基因模型后分类：A 类 $numA 个、B 类 $numB 个、C 类 $numC 个、D 类 $numD 个，基因模型总数为 $num_total 个。\n";


# 计算protein序列对同源蛋白的覆盖度
sub cal_protein_length_ratio {
    my $info = $_[0];
    my $homolog_length = 1;
    $homolog_length = $1 if m/Homolog_length=(\d+)/;
    my $CDS_length = 0;
    foreach ( split /\n/, $info ) {
        @_ = split /\t/;
        $CDS_length += (abs($_[4] - $_[3]) + 1) if $_[2] eq "CDS";
    }
    my $ratio = $CDS_length / ($homolog_length * 3);
    return $ratio;
}

# 根据表格形式内容获得GFF3格式
sub get_gff3 {
    my @geneModels_Tab = @{$_[0]};
    my $type = $_[1];
    my $geneID = $_[2];
    my %intron_support_num = %{$_[3]};

    my ($genome_seq_name, $source, $start, $end, $intron, $strand, $homolog_name, $homolog_length) = @geneModels_Tab;
    my $blastx_homolog_coverage = int(( (abs($geneModels_Tab[9] - $geneModels_Tab[8]) + 1) / $geneModels_Tab[7] ) * 10000 + 0.5) / 100;
    my ($blastx_evalue, $blastx_identity) = ($geneModels_Tab[12], $geneModels_Tab[14]);

    my (@CDS, @intron);
    # 获得intron信息
    if ( $intron ne "NULL" ) {
        foreach ( split /;/, $intron ) {
            if ( m/(\d+)-(\d+)/ ) {
                if ( $2 > $1 ) {
                    push @intron, "$1\t$2";
                }
                else {
                    push @intron, "$2\t$1";
                }
            }
        }
        @intron = sort {$a <=> $b} @intron;
    }
    # 获得基因起始和结束位点
    ($start, $end) = ($end, $start) if $start > $end;
    my ($gene_start, $gene_end) = ($start, $end);
    # 获得CDS信息
    foreach (@intron) {
        @_ = split /\t/, $_;
        my $CDS_end = $_[0] - 1;
        my $CDS_start = $_[1] + 1;
        push @CDS, "$start\t$CDS_end";
        $start = $CDS_start;
    }
    push @CDS, "$start\t$end";

    # 获得GFF3
    my ($gff3_out, %gff3_out);
    $gff3_out .= "$genome_seq_name\t$source\tgene\t$gene_start\t$gene_end\t\.\t$strand\t\.\tID=$geneID;Name=$geneID;Type=$type;Homolog_name=$homolog_name;Homolog_length=$homolog_length;Blastx_coverage=$blastx_homolog_coverage\%;Blastx_evalue=$blastx_evalue;Blastx_identity=$blastx_identity;Source=$source;\n";
    $gff3_out .= "$genome_seq_name\t$source\tmRNA\t$gene_start\t$gene_end\t\.\t$strand\t\.\tID=$geneID.mRNA;Name=$geneID.mRNA;Parent=$geneID;Type=$type;Homolog_name=$homolog_name;Homolog_length=$homolog_length;Blastx_coverage=$blastx_homolog_coverage\%;Blastx_evalue=$blastx_evalue;Blastx_identity=$blastx_identity;Source=$source;\n";
    my ($frame, $length, $num) = (0, 0, 0);
    @CDS = sort{$b <=> $a} @CDS if $strand eq "-";
    foreach ( @CDS ) {
        $num ++;
        @_ = split /\t/, $_;
        $length += ($_[1] - $_[0] + 1);
        $gff3_out{"$genome_seq_name\t$source\tCDS\t$_[0]\t$_[1]\t\.\t$strand\t$frame\tID=$geneID.mRNA.CDS$num;Parent=$geneID.mRNA;\n"} = $_[0];
        $gff3_out{"$genome_seq_name\t$source\texon\t$_[0]\t$_[1]\t\.\t$strand\t\.\tID=$geneID.mRNA.exon$num;Parent=$geneID.mRNA;\n"} = $_[0];
        $frame = $length % 3;
        if ( $frame == 1 ) {
            $frame = 2;
        }
        elsif ( $frame == 2 ) {
            $frame = 1;
        }
    }
    my $num = 0;
    @intron = sort{$b <=> $a} @intron if $strand eq "-";
    foreach ( @intron ) {
        $num ++;
        @_ = split /\t/, $_;
        my $intron_support_num = 1;
        $intron_support_num += $intron_support_num{$_} if exists $intron_support_num{$_};
        $gff3_out{"$genome_seq_name\t$source\tintron\t$_[0]\t$_[1]\t\.\t$strand\t\.\tID=$geneID.mRNA.intron$num;Parent=$geneID.mRNA;Supported_times=$intron_support_num;\n"} = $_[0];
    }
    foreach ( sort {$gff3_out{$a} <=> $gff3_out{$b} or $b cmp $a} keys %gff3_out ) {
        $gff3_out .= $_;
    }

    return $gff3_out;
}

sub codon_table {
    my %code = (
        "TTT" => "F",
        "TTC" => "F",
        "TTA" => "L",
        "TTG" => "L",
        "TCT" => "S",
        "TCC" => "S",
        "TCA" => "S",
        "TCG" => "S",
        "TAT" => "Y",
        "TAC" => "Y",
        "TAA" => "X",
        "TAG" => "X",
        "TGT" => "C",
        "TGC" => "C",
        "TGA" => "X",
        "TGG" => "W",
        "CTT" => "L",
        "CTC" => "L",
        "CTA" => "L",
        "CTG" => "L",
        "CCT" => "P",
        "CCC" => "P",
        "CCA" => "P",
        "CCG" => "P",
        "CAT" => "H",
        "CAC" => "H",
        "CAA" => "Q",
        "CAG" => "Q",
        "CGT" => "R",
        "CGC" => "R",
        "CGA" => "R",
        "CGG" => "R",
        "ATT" => "I",
        "ATC" => "I",
        "ATA" => "I",
        "ATG" => "M",
        "ACT" => "T",
        "ACC" => "T",
        "ACA" => "T",
        "ACG" => "T",
        "AAT" => "N",
        "AAC" => "N",
        "AAA" => "K",
        "AAG" => "K",
        "AGT" => "S",
        "AGC" => "S",
        "AGA" => "R",
        "AGG" => "R",
        "GTT" => "V",
        "GTC" => "V",
        "GTA" => "V",
        "GTG" => "V",
        "GCT" => "A",
        "GCC" => "A",
        "GCA" => "A",
        "GCG" => "A",
        "GAT" => "D",
        "GAC" => "D",
        "GAA" => "E",
        "GAG" => "E",
        "GGT" => "G",
        "GGC" => "G",
        "GGA" => "G",
        "GGG" => "G",
    );
    my %start_codon;
    $start_codon{"ATG"} = 1;
    if ( $genetic_code == 1 ) {
        # The Standard Code
        #$start_codon{"TTG"} = 1;
        #$start_codon{"CTG"} = 1;
    }
    elsif ( $genetic_code == 2 ) {
        # The Vertebrate Mitochondrial Code
        $code{"AGA"} = "X";
        $code{"AGG"} = "X";
        $code{"ATA"} = "M";
        $code{"TGA"} = "W";
        $start_codon{"ATA"} = 1;
        $start_codon{"ATT"} = 1;
        $start_codon{"ATC"} = 1;
        $start_codon{"GTG"} = 1;
    }
    elsif ( $genetic_code == 3 ) {
        # The Yeast Mitochondrial Code
        $code{"ATA"} = "M";
        $code{"CTT"} = "T";
        $code{"CTC"} = "T";
        $code{"CTA"} = "T";
        $code{"CTG"} = "T";
        $code{"TGA"} = "W";
        $start_codon{"ATA"} = 1;
        $start_codon{"GTG"} = 1;
    }
    elsif ( $genetic_code == 4 ) {
        # The Mold, Protozoan, and Coelenterate Mitochondrial Code and the Mycoplasma/Spiroplasma Code
        $code{"TGA"} = "W";
        $start_codon{"ATA"} = 1;
        $start_codon{"ATT"} = 1;
        $start_codon{"ATC"} = 1;
        $start_codon{"GTG"} = 1;
        $start_codon{"CTG"} = 1;
        $start_codon{"TTA"} = 1;
        $start_codon{"TTG"} = 1;
    }
    elsif ( $genetic_code == 5 ) {
        # The Invertebrate Mitochondrial Code
        $code{"AGA"} = "S";
        $code{"AGG"} = "S";
        $code{"ATA"} = "M";
        $code{"TGA"} = "W";
        $start_codon{"ATA"} = 1;
        $start_codon{"ATT"} = 1;
        $start_codon{"ATC"} = 1;
        $start_codon{"GTG"} = 1;
        $start_codon{"TTG"} = 1;
    }
    elsif ( $genetic_code == 6 ) {
        # The Ciliate, Dasycladacean and Hexamita Nuclear Code
        $code{"TAA"} = "Q";
        $code{"TAG"} = "Q";
    }
    elsif ( $genetic_code == 9 ) {
        # The Echinoderm and Flatworm Mitochondrial Code
        $code{"AAA"} = "N";
        $code{"AGA"} = "S";
        $code{"AGG"} = "S";
        $code{"TGA"} = "W";
        $start_codon{"GTG"} = 1;
    }
    elsif ( $genetic_code == 10 ) {
        # The Euplotid Nuclear Code
        $code{"TGA"} = "C";
    }
    elsif ( $genetic_code == 11 ) {
        # The Bacterial, Archaeal and Plant Plastid Code
        $start_codon{"ATA"} = 1;
        $start_codon{"ATT"} = 1;
        $start_codon{"ATC"} = 1;
        $start_codon{"GTG"} = 1;
        $start_codon{"CTG"} = 1;
        $start_codon{"TTG"} = 1;
    }
    elsif ( $genetic_code == 12 ) {
        # The Alternative Yeast Nuclear Code
        $code{"CTG"} = "S";
        $start_codon{"CTG"} = 1;
    }
    elsif ( $genetic_code == 13 ) {
        # The Ascidian Mitochondrial Code
        $code{"AGA"} = "G";
        $code{"AGG"} = "G";
        $code{"ATA"} = "M";
        $code{"TGA"} = "W";
        $start_codon{"ATA"} = 1;
        $start_codon{"GTG"} = 1;
        $start_codon{"TTG"} = 1;
    }
    elsif ( $genetic_code == 14 ) {
        # The Alternative Flatworm Mitochondrial Code
        $code{"AAA"} = "N";
        $code{"AGA"} = "S";
        $code{"AGG"} = "S";
        $code{"TAA"} = "Y";
        $code{"TGA"} = "W";
    }
    elsif ( $genetic_code == 16 ) {
        # Chlorophycean Mitochondrial Code
        $code{"TAG"} = "L";
    }
    elsif ( $genetic_code == 21 ) {
        # Trematode Mitochondrial Code
        $code{"TGA"} = "W";
        $code{"ATA"} = "M";
        $code{"AGA"} = "S";
        $code{"AGG"} = "S";
        $code{"AAA"} = "N";
        $start_codon{"GTG"} = 1;
    }
    elsif ( $genetic_code == 22 ) {
        # Scenedesmus obliquus Mitochondrial Code
        $code{"TCA"} = "X";
        $code{"TAG"} = "L";
    }
    elsif ( $genetic_code == 23 ) {
        # Thraustochytrium Mitochondrial Code
        $code{"TTA"} = "X";
        $start_codon{"ATT"} = 1;
        $start_codon{"GTG"} = 1;
    }
    elsif ( $genetic_code == 24 ) {
        # Rhabdopleuridae Mitochondrial Code
        $code{"AGA"} = "S";
        $code{"AGG"} = "K";
        $code{"TGA"} = "W";
        $start_codon{"GTG"} = 1;
        $start_codon{"CTG"} = 1;
        $start_codon{"TTG"} = 1;
    }
    elsif ( $genetic_code == 25 ) {
        # Candidate Division SR1 and Gracilibacteria Code
        $code{"TGA"} = "G";
        $start_codon{"GTG"} = 1;
        $start_codon{"TTG"} = 1;
    }
    elsif ( $genetic_code == 26 ) {
        # Pachysolen tannophilus Nuclear Code
        # warning: The descritpions of initiation codons by 2 methods are confict according to the NCBI web site.
        $code{"CTG"} = "A";
        $start_codon{"GTG"} = 1;
        $start_codon{"TTG"} = 1;
    }
    elsif ( $genetic_code == 27 ) {
        # Karyorelict Nuclear Code
        $code{"TAG"} = "Q";
        $code{"TAA"} = "Q";
    }
    elsif ( $genetic_code == 29 ) {
        # Mesodinium Nuclear Code
        $code{"TAA"} = "Y";
        $code{"TAG"} = "Y";
    }
    elsif ( $genetic_code == 30 ) {
        # Peritrich Nuclear Code
        $code{"TAA"} = "E";
        $code{"TAG"} = "E";
    }
    elsif ( $genetic_code == 31 ) {
        # Blastocrithidia Nuclear Code
        $code{"TGA"} = "W";
    }
    elsif ( $genetic_code == 33 ) {
        # Cephalodiscidae Mitochondrial UAA-Tyr Code
        $code{"TAA"} = "Y";
        $code{"TGA"} = "Y";
        $code{"AGA"} = "S";
        $code{"AGG"} = "K";
    }

    my %stop_codon;
    foreach ( keys %code ) {
        $stop_codon{$_} = 1 if $code{$_} eq "X";
    }

    return (\%code, \%start_codon, \%stop_codon);
}

sub gff3_alignment {
    my $out;
    my ($genome_seq_name, $source, $start, $end, $intron, $strand, $homolog_name, $homolog_length) = @_;

    my (@CDS, @intron);
    # 获得intron信息
    if ( $intron ne "NULL" ) {
        foreach ( split /;/, $intron ) {
            if ( m/(\d+)-(\d+)/ ) {
                if ( $2 > $1 ) {
                    push @intron, "$1\t$2";
                }
                else {
                    push @intron, "$2\t$1";
                }
            }
        }
        @intron = sort {$a <=> $b} @intron;
    }
    # 获得基因起始和结束位点
    ($start, $end) = ($end, $start) if $start > $end;
    my ($gene_start, $gene_end) = ($start, $end);
    # 获得CDS信息
    foreach (@intron) {
        @_ = split /\t/, $_;
        my $CDS_end = $_[0] - 1;
        my $CDS_start = $_[1] + 1;
        push @CDS, "$start\t$CDS_end";
        $start = $CDS_start;
    }
    push @CDS, "$start\t$end";

    # 获得GFF3
    my ($frame, $length, $num) = (0, 0, 0);
    @CDS = sort{$b <=> $a} @CDS if $strand eq "-";
    foreach ( @CDS ) {
        $num ++;
        @_ = split /\t/, $_;
        $length += ($_[1] - $_[0] + 1);
        $out .= "$genome_seq_name\t$source\tprotein_match\t$_[0]\t$_[1]\t\.\t$strand\t$frame\tID=$homolog_name;Name=$homolog_name\n";
        $frame = $length % 3;
        if ( $frame == 1 ) {
            $frame = 2;
        }
        elsif ( $frame == 2 ) {
            $frame = 1;
        }
    }

    return $out;
}
